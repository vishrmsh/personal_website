{"version":3,"sources":["../../cli-site-old/src/preview/PreviewCommand.tsx","../../cli-site-old/src/preview/SelectPreviewSource.tsx","../../cli-site-old/src/preview/useCreatePreview.ts"],"sourcesContent":["import React from 'react';\nimport type { FC } from 'react';\nimport { Trans, useTranslation } from '@wix/cli-i18n';\nimport { isType, match } from 'variant';\nimport { DeploymentStatus } from '@wix/document-management-client';\nimport {\n  Alert,\n  Link,\n  Spinner,\n  useAsync,\n  useAsyncCallback,\n} from '@wix/cli-ui-kit';\nimport type { DeploymentSourceTypes } from '../gridapp/deployApp.js';\nimport { useProjectModel } from '../model.js';\nimport { SelectPreviewSource } from './SelectPreviewSource.js';\nimport { useCreatePreview } from './useCreatePreview.js';\n\ninterface PreviewCommandOptions {\n  source?: DeploymentSourceTypes;\n}\n\nexport const PreviewCommand: FC<PreviewCommandOptions> = (options) => {\n  const { t } = useTranslation();\n  const { model } = useProjectModel();\n  const createPreview = useCreatePreview();\n\n  const { status, execute: handleCreatingPreview } = useAsyncCallback(\n    async (_, previewSource: DeploymentSourceTypes) => {\n      const { previewUrl, deploymentStatus } =\n        await createPreview(previewSource);\n\n      if (isType(deploymentStatus, DeploymentStatus.Error)) {\n        throw deploymentStatus.deploymentError;\n      }\n\n      return previewUrl;\n    }\n  );\n\n  // Create preview when source is passed as an option\n  useAsync(async () => {\n    if (options.source) {\n      void handleCreatingPreview(options.source);\n    }\n  }, []);\n\n  return (\n    <>\n      {!options.source && (\n        <SelectPreviewSource\n          projectFolder={model.projectFolder}\n          onSubmit={({ value }) => handleCreatingPreview(value.type)}\n        />\n      )}\n      {match(status, {\n        NotRequested: () => null,\n        Error: () => null,\n        Loading: () => <Spinner text={t('preview_command.creating_preview')} />,\n        Success: ({ result: previewUrl }) => (\n          <Alert type=\"success\">\n            <Trans\n              i18nKey=\"preview_command.preview_created\"\n              components={[<Link url={previewUrl} />]}\n            />\n          </Alert>\n        ),\n      })}\n    </>\n  );\n};\n","import React from 'react';\nimport type { FC } from 'react';\nimport { match } from 'variant';\nimport { useTranslation } from '@wix/cli-i18n';\nimport { writeCrashReport } from '@wix/cli-debug-log';\nimport { getDebugLogFilePath } from '@wix/cli-core-definitions';\nimport type { SelectOption } from '@wix/cli-ui-kit';\nimport { SelectInput, Spinner, useAsync } from '@wix/cli-ui-kit';\nimport { getDefaultBranch } from '../git/index.js';\nimport { DeploymentSource } from '../gridapp/deployApp.js';\n\ninterface SelectPreviewSourceProps {\n  projectFolder: string;\n  onSubmit: (option: SelectOption<DeploymentSource>) => void;\n}\n\nexport const SelectPreviewSource: FC<SelectPreviewSourceProps> = ({\n  projectFolder,\n  onSubmit,\n}) => {\n  const { t } = useTranslation();\n\n  const { status } = useAsync(\n    () =>\n      getDefaultBranch((e) =>\n        writeCrashReport(getDebugLogFilePath(projectFolder), e)\n      ),\n    []\n  );\n\n  return match(status, {\n    Error: () => null,\n    Loading: () => <Spinner />,\n    Success: ({ result: defaultBranchName }) => (\n      <SelectInput<DeploymentSource>\n        label={t('preview_command.prompt_what_to_preview')}\n        options={[\n          {\n            key: 'remote',\n            value: DeploymentSource.remote(),\n            title: defaultBranchName\n              ? t('preview_command.prompt_what_to_preview_choice_latest', {\n                  branchName: defaultBranchName,\n                })\n              : t(\n                  'preview_command.prompt_what_to_preview_choice_latest_fallback'\n                ),\n          },\n          {\n            key: 'local',\n            value: DeploymentSource.local(),\n            title: t('preview_command.prompt_what_to_preview_choice_local'),\n          },\n        ]}\n        onSubmit={onSubmit}\n      />\n    ),\n  });\n};\n","import { useCallback } from 'react';\nimport { useVeloClient } from '@wix/velo-client';\nimport {\n  DeploymentStatus,\n  useDocumentManagementClient,\n} from '@wix/document-management-client';\nimport type { DeploymentSourceTypes } from '../gridapp/deployApp.js';\nimport {\n  getDeploymentSourceData,\n  DeploymentSource,\n} from '../gridapp/deployApp.js';\nimport { useProjectModel } from '../model.js';\n\nexport function useCreatePreview() {\n  const { model } = useProjectModel();\n  const veloClient = useVeloClient();\n  const dmClient = useDocumentManagementClient();\n\n  return useCallback(\n    async (previewSource: DeploymentSourceTypes) => {\n      const deploymentSourceData = await getDeploymentSourceData(\n        model,\n        previewSource === 'local'\n          ? DeploymentSource.local()\n          : DeploymentSource.remote()\n      );\n\n      const preview = await veloClient.deploySitePreview(deploymentSourceData);\n\n      return {\n        deploymentId: preview.deploymentId,\n        previewUrl: preview.deploymentShortUrl ?? preview.deploymentUrl,\n        deploymentStatus: preview.isPublishPipelineDeployment\n          ? await dmClient.getDeploymentDetails(preview.deploymentId)\n          : DeploymentStatus.Success(),\n      };\n    },\n    [dmClient, model, veloClient]\n  );\n}\n"],"mappings":"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","names":["import_react","import_variant","React","import_react","React"]}