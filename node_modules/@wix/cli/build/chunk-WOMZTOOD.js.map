{"version":3,"sources":["../../cli-site-old/src/logger.ts"],"sourcesContent":["import {\n  WIX_LOCK_FILENAME,\n  WIX_CONFIG_FILENAME,\n} from '@wix/cli-core-definitions';\nimport { VELO_DEPENDENCIES_CONFIG_FILENAME } from '@wix/cli-site-old-definitions';\nimport { createLogger as createCliLogger } from '@wix/cli-logger';\nimport chalk from 'chalk';\nimport terminalLink from 'terminal-link';\nimport type { TFunction } from '@wix/cli-i18n';\nimport type { PipelineDescription } from '@wix/ambassador-document-management-editor-deployments-v1-deployment/types';\n\nexport function createLogger({ t }: { t: TFunction }) {\n  const logger = createCliLogger();\n\n  const logAborting = () => logger.log(chalk.dim(t('general.aborting')));\n\n  const logSyncingLocalCode = () => {\n    const loader = logger.logWithLoader({\n      text: t('dev_command.syncing_local_code_start'),\n    });\n\n    return {\n      success: () => {\n        const message = t('dev_command.syncing_local_code_end');\n        loader.succeed(message);\n        return message;\n      },\n      fail: () => loader.stop(),\n    };\n  };\n\n  const logUpdatedLocalCodeToRevision = ({\n    revision,\n  }: {\n    revision: string;\n  }) => {\n    const message = t('dev_command.revision_created', {\n      revision,\n      configFileName: WIX_CONFIG_FILENAME,\n    });\n    logger.log(message);\n    return message;\n  };\n\n  const logRecoverableFailureToRemoveTypesDir = (error: unknown) => {\n    const cause = getErrorMessage(error);\n\n    logger\n      .logWithLoader(t('dev_command.failed_to_delete_types_dir', { cause }))\n      .fail();\n    logNewLine();\n  };\n\n  const logSyncingTypesToRevision = (revision: string) => {\n    const loader = logger.logWithLoader({\n      text: t('dev_command.syncing_types_to_revision_start', { revision }),\n    });\n\n    return {\n      success: () => {\n        loader.succeed(\n          t('dev_command.syncing_types_to_revision_end', { revision })\n        );\n      },\n      fail: () => {\n        loader.fail(t('dev_command.syncing_types_to_revision_fail_line1'));\n        logger.log(\n          `  ${t('dev_command.syncing_types_to_revision_fail_line2')}`\n        );\n        logNewLine();\n        logger.log(\n          `  ${t('dev_command.syncing_types_to_revision_fail_line3')}`\n        );\n        logNewLine();\n      },\n    };\n  };\n\n  const logSyncingPagesToRevision = (revision: string) => {\n    const loader = logger.logWithLoader({\n      text: t('dev_command.syncing_pages_to_revision_start', { revision }),\n    });\n\n    return {\n      success: () => {\n        loader.succeed(\n          t('dev_command.syncing_pages_to_revision_end', { revision })\n        );\n      },\n      fail: () => loader.fail(),\n    };\n  };\n\n  const logNewLine = () => logger.log('');\n\n  const logDependencyInstalling = (dependencyName: string) => {\n    const loader = logger.logWithLoader({\n      text: chalk.yellow(\n        t('dependencies.installing_dependency', {\n          dependency: chalk.bold.yellow(dependencyName),\n        })\n      ),\n    });\n    return {\n      success: () => {\n        loader.succeed(\n          chalk.green(\n            t('dependencies.dependency_installed', {\n              dependency: chalk.bold.green(dependencyName),\n            })\n          )\n        );\n      },\n      fail: () => loader.stop(),\n    };\n  };\n\n  const logAllDependenciesInstalling = () => {\n    const loader = logger.logWithLoader({\n      text: chalk.yellow(t('dependencies.installing_all_dependencies')),\n    });\n    return {\n      success: () => {\n        loader.succeed(\n          chalk.green(t('dependencies.all_dependencies_installed'))\n        );\n      },\n      fail: () => loader.stop(),\n    };\n  };\n\n  const logDependencyUninstalling = (dependencyName: string) => {\n    const loader = logger.logWithLoader({\n      text: chalk.yellow(\n        t('dependencies.uninstalling_dependency', {\n          dependency: chalk.bold.yellow(dependencyName),\n        })\n      ),\n    });\n\n    return {\n      success: () => {\n        loader.succeed(\n          chalk.green(\n            t('dependencies.dependency_uninstalled', {\n              dependency: chalk.bold.green(dependencyName),\n            })\n          )\n        );\n      },\n      fail: () => loader.stop(),\n    };\n  };\n\n  const logOpeningBrowser = (https: boolean) => {\n    logger.log(t('dev_command.opening_browser'));\n\n    if (https) {\n      logger.log(t('dev_command.dev_server_url.approve_cert'));\n    }\n  };\n\n  const logNoOpenedTab = (devEditorUrl: string) => {\n    const message = t('dev_command.no_open_editor', {\n      key: chalk.bold.italic('e'),\n      link: devEditorUrl,\n    });\n    logger.log(message);\n    return message;\n  };\n\n  const logPublishRevision = ({\n    branchName,\n    isLocalDeployment,\n    currentRevision,\n    latestRevision,\n    preview,\n  }: {\n    branchName: string | null;\n    isLocalDeployment: boolean;\n    currentRevision: string;\n    latestRevision: string | null;\n    preview:\n      | {\n          deploymentId: string;\n          deploymentUrl: string;\n          deploymentShortUrl?: string | null;\n          deployedRevision: string;\n        }\n      | undefined;\n  }) =>\n    logger.log(`\n  ${\n    !preview\n      ? ''\n      : `${t('publish_command.publish_details_preview')}\n  ${chalk.underline(\n    chalk.blue(preview.deploymentShortUrl ?? preview.deploymentUrl)\n  )}`\n  }\n\n  ${chalk.bold(t('publish_command.publish_details_about_to_publish'))}\n\n    ${\n      isLocalDeployment\n        ? t('publish_command.prompt_what_to_publish_choice_local')\n        : branchName\n          ? t('publish_command.prompt_what_to_publish_choice_remote', {\n              branchName,\n            })\n          : t('publish_command.prompt_what_to_publish_choice_remote_fallback')\n    }\n    ${t('publish_command.publish_details_ui_version', {\n      revision: currentRevision,\n    })}\n    ${\n      latestRevision && Number(latestRevision) > Number(currentRevision)\n        ? `\\n  ${chalk.red(\n            `${chalk.bold(\n              t(\n                'publish_command.publish_details_newer_editor_version_caution_title'\n              )\n            )}: ${t(\n              'publish_command.publish_details_newer_editor_version_caution_details'\n            )} ${chalk.underline(\n              chalk.blue(\n                terminalLink(\n                  t(\n                    'publish_command.publish_details_newer_editor_version_link_text'\n                  ),\n                  t(\n                    'publish_command.publish_details_newer_editor_version_link_url'\n                  )\n                )\n              )\n            )}`\n          )}\\n`\n        : ''\n    }\n    ${\n      isLocalDeployment\n        ? chalk.red(\n            `${chalk.bold(\n              t('publish_command.publish_details_local_caution_title')\n            )}: ${t('publish_command.publish_details_local_caution_details')}\\n`\n          )\n        : ''\n    }`);\n\n  const logPipelineErrorInformation = ({\n    pipelinesDescription,\n  }: {\n    pipelinesDescription: PipelineDescription[];\n  }) => {\n    const errorBadge = t('publish_command.publish_pipeline_error_badge');\n    const taskDone = chalk.green(t('publish_command.generic_task_done'));\n    const taskFailed = chalk.red(t('publish_command.generic_task_failed'));\n    const divider = '-'.repeat(30);\n    const padding = '  ';\n\n    const normalizeText = (text: string) => {\n      return text\n        .split('\\n')\n        .map((line, index) => {\n          if (line.trim() && index) {\n            return `${padding}${line}`;\n          }\n\n          return line;\n        })\n        .join('\\n');\n    };\n\n    let output = '';\n\n    output += `\\n${chalk.red(errorBadge)} ${t(\n      'publish_command.publish_pipeline_error_title'\n    )}\\n`;\n    output += `\\n${divider}\\n`;\n    output += `Status: ${taskFailed}`;\n\n    const tasksDescriptions = pipelinesDescription[0]?.tasksDescriptions;\n\n    if (tasksDescriptions) {\n      for (const task of tasksDescriptions) {\n        output += `\\n\\n* ${task.taskName}... ${\n          task.status === 'ERROR' ? `${taskFailed}:` : taskDone\n        }\\n`;\n\n        if (task.description) {\n          const errorDescription = JSON.parse(task.description);\n\n          for (const fileName in errorDescription) {\n            output += `\\n${padding}${errorBadge} ${fileName} | `;\n            output += normalizeText(errorDescription[fileName].toString());\n          }\n        }\n      }\n    }\n\n    output += `\\n${divider}`;\n\n    logger.log(output);\n  };\n\n  const logPublishing = () => {\n    const loader = logger.logWithLoader({\n      text: t('publish_command.publishing'),\n    });\n\n    return {\n      success: ({ siteUrl }: { siteUrl: string }) => {\n        loader.succeed(\n          t('publish_command.published', {\n            url: chalk.underline(chalk.blue(siteUrl)),\n          })\n        );\n      },\n      fail: () => loader.stop(),\n    };\n  };\n\n  const logDeploying = () => {\n    const loader = logger.logWithLoader({\n      text: t('publish_command.deploying'),\n    });\n\n    return {\n      success: () => {\n        loader.succeed(\n          `${t('publish_command.deploying')} ${chalk.green(\n            t('publish_command.generic_task_done')\n          )}`\n        );\n      },\n      fail: () =>\n        loader.fail(\n          `${t('publish_command.deploying')} ${chalk.red(\n            t('publish_command.generic_task_failed')\n          )}`\n        ),\n    };\n  };\n\n  const logForceDeployWarning = () =>\n    logger.log(\n      chalk.red(\n        `${chalk.bold(\n          t('publish_command.publish_with_errors_caution_title')\n        )}: ${t('publish_command.publish_with_errors_caution_details')}\\n`\n      )\n    );\n\n  const logPublishAborted = () =>\n    logger.log(`\\n${t('publish_command.publish_aborted')}`);\n\n  const logCreatingPreview = () =>\n    logger.log(`\\n${t('preview_command.creating_preview')}\\n`);\n\n  const logPreviewCreated = (url: string) =>\n    logger.log(t('preview_command.preview_created', { url: chalk.green(url) }));\n\n  const logPreviewUnsupported = () =>\n    logger.log(t('preview_command.preview_unsupported'));\n\n  const logFailedToGetLatestRevision = (error: unknown) => {\n    const cause = error instanceof Error ? error.stack : error;\n    logger.log(t('publish_command.failed_getting_latest_revision', { cause }));\n  };\n\n  const logMigratingToAnyNpm = () => {\n    logger.log(\n      `${t('install_command.migrating_to_any_npm', {\n        wixLockFileName: WIX_LOCK_FILENAME,\n        configFileName: VELO_DEPENDENCIES_CONFIG_FILENAME,\n      })}\\n`\n    );\n    logger.log(\n      chalk.yellow(t('install_command.starting_migrating_to_any_npm'))\n    );\n  };\n\n  const logMigrationToAnyNpmCompletedSuccessfully = () =>\n    logger.log(chalk.green(t('install_command.migration_to_any_npm_success')));\n\n  const logMigrationToAnyNpmFailed = () => {\n    logger.log(chalk.red(t('install_command.migration_to_any_npm_failed')));\n  };\n\n  const logPreviewing = () => {\n    const loader = logger.logWithLoader({\n      text: t('publish_command.creating_preview'),\n    });\n\n    return {\n      success: () =>\n        loader.succeed(t('publish_command.creating_preview_success')),\n      fail: () => loader.fail(t('publish_command.creating_preview_failed')),\n      stop: () => loader.stop(),\n    };\n  };\n\n  return {\n    t,\n    logAborting,\n    logSyncingLocalCode,\n    logRecoverableFailureToRemoveTypesDir,\n    logUpdatedLocalCodeToRevision,\n    logSyncingPagesToRevision,\n    logSyncingTypesToRevision,\n    logDependencyInstalling,\n    logDependencyUninstalling,\n    logAllDependenciesInstalling,\n    logOpeningBrowser,\n    logNoOpenedTab,\n    logPublishRevision,\n    logPublishing,\n    logPublishAborted,\n    logCreatingPreview,\n    logPreviewCreated,\n    logPreviewUnsupported,\n    logNewLine,\n    logFailedToGetLatestRevision,\n    logMigratingToAnyNpm,\n    logMigrationToAnyNpmCompletedSuccessfully,\n    logMigrationToAnyNpmFailed,\n    logDeploying,\n    logForceDeployWarning,\n    logPipelineErrorInformation,\n    logPreviewing,\n  };\n}\n\nfunction getErrorMessage(cause: unknown) {\n  return cause instanceof Error ? cause.message : JSON.stringify(cause);\n}\n\nexport type Logger = ReturnType<typeof createLogger>;\n"],"mappings":"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","names":["createLogger"]}