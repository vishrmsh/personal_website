{"version":3,"sources":["../../cli-site-old/src/git/index.ts","../../cli-site-old/src/gridapp/deployApp.ts"],"sourcesContent":["import { execa } from 'execa';\n\nconst BASE_REMOTE_REF = 'refs/remotes/';\nconst ORIGIN = 'origin/';\n\nexport const getDefaultBranch = async (\n  writeCrashReport: (error: unknown) => void\n) => {\n  try {\n    const { stdout } = await execa('git', [\n      'symbolic-ref',\n      `${BASE_REMOTE_REF}${ORIGIN}HEAD`,\n    ]);\n\n    const fullName = stdout.replace(BASE_REMOTE_REF, '');\n    return fullName;\n  } catch (error) {\n    // This command can fail due to several user-related reasons, but all usages are recoverable\n    writeCrashReport(error);\n    return null;\n  }\n};\n","import { deployApp } from '@wix/ambassador-velo-apps-v1-app/http';\nimport {\n  AppType,\n  DeploymentOperation,\n  RcLabel,\n} from '@wix/ambassador-velo-apps-v1-app/types';\nimport type { AuthState } from '@wix/cli-auth';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\nimport { getDeployment } from '@wix/ambassador-document-management-editor-deployments-v1-deployment/http';\nimport { DeploymentPipelinesStatus } from '@wix/ambassador-document-management-editor-deployments-v1-deployment/types';\nimport type { VariantOf, TypesOf } from 'variant';\nimport { fields, match, variant } from 'variant';\nimport pWaitFor from 'p-wait-for';\nimport type { ProjectModel } from '../model.js';\nimport { httpRequest } from '../http-request.js';\nimport { loadProjectGridAppContent } from './loadProjectGridAppContent.js';\nimport {\n  deployAppResponseSchema,\n  getDeploymentResponseSchema,\n} from '../schemas.js';\n\nexport const DeploymentSource = variant({\n  local: {},\n  remote: fields<{\n    branch?: string;\n  }>(),\n});\nexport type DeploymentSource = VariantOf<typeof DeploymentSource>;\nexport type DeploymentSourceTypes = TypesOf<typeof DeploymentSource>;\n\nexport async function getDeploymentSourceData(\n  model: ProjectModel,\n  source: DeploymentSource\n) {\n  return match(source, {\n    local: async () => ({\n      deploymentData: {\n        revision: model.revision,\n        content: await loadProjectGridAppContent(model.projectFolder),\n      },\n    }),\n    remote: () => ({}),\n  });\n}\n\nexport async function deployGridApp(opts: {\n  model: ProjectModel;\n  operation: DeploymentOperation;\n  source: DeploymentSource;\n  authState: AuthState;\n}) {\n  const deploymentSourceData = await getDeploymentSourceData(\n    opts.model,\n    opts.source\n  );\n\n  try {\n    const { data } = await httpRequest(\n      {\n        type: 'code',\n        authState: opts.authState,\n      },\n      deployApp({\n        deploymentOperation: opts.operation,\n        appType: AppType.VELO_ISOLATED,\n        ...deploymentSourceData,\n        ...(opts.operation === DeploymentOperation.RC && {\n          rcDeploymentParams: {\n            rcLabel: RcLabel.WIX_CLI,\n          },\n        }),\n      }),\n      { retries: 3, maxTimeout: 3 * 1000 }\n    );\n\n    const result = deployAppResponseSchema.safeParse(data);\n\n    if (!result.success) {\n      throw new CliError({\n        code: CliErrorCode.InvalidDeployAppResponse(),\n        info: { data },\n        cause: result.error,\n      });\n    }\n\n    return result.data.deploymentInfo;\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.FailedToDeploySite(),\n      cause: e,\n    });\n  }\n}\n\nexport async function getDeploymentStatus({\n  deploymentId,\n  authState,\n}: {\n  deploymentId: string;\n  authState: AuthState;\n}) {\n  const deploymentStatus = await pWaitFor(\n    async () => {\n      try {\n        const { data } = await httpRequest(\n          {\n            type: 'editor',\n            authState,\n          },\n          getDeployment({\n            deploymentId,\n          }),\n          { retries: 2 }\n        );\n\n        const result = getDeploymentResponseSchema.safeParse(data);\n\n        if (!result.success) {\n          throw new CliError({\n            code: CliErrorCode.InvalidGetDeploymentResponse(),\n            info: { data },\n            cause: result.error,\n          });\n        }\n\n        const status = result.data.deployment.deploymentPipelinesStatus;\n\n        // Continue polling\n        if (status === DeploymentPipelinesStatus.IN_PROGRESS) {\n          return false;\n        }\n\n        return pWaitFor.resolveWith(status);\n      } catch (err) {\n        throw new CliError({\n          code: CliErrorCode.FailedToGetDeploymentStatus(),\n          cause: err,\n        });\n      }\n    },\n    {\n      // Poll each 2 seconds\n      interval: 2 * 1000,\n      // Fail if 2 minutes passed\n      timeout: 2 * 60 * 1000,\n    }\n  );\n\n  return deploymentStatus;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,IAAM,kBAAkB;AACxB,IAAM,SAAS;AAER,IAAM,mBAAmB,OAC9B,qBACG;AACH,MAAI;AACF,UAAM,EAAE,OAAO,IAAI,MAAM,MAAM,OAAO;AAAA,MACpC;AAAA,MACA,GAAG,eAAe,GAAG,MAAM;AAAA,IAC7B,CAAC;AAED,UAAM,WAAW,OAAO,QAAQ,iBAAiB,EAAE;AACnD,WAAO;AAAA,EACT,SAAS,OAAO;AAEd,qBAAiB,KAAK;AACtB,WAAO;AAAA,EACT;AACF;;;ACrBA;AAWA,qBAAuC;AAUhC,IAAM,uBAAmB,wBAAQ;AAAA,EACtC,OAAO,CAAC;AAAA,EACR,YAAQ,uBAEL;AACL,CAAC;AAID,eAAsB,wBACpB,OACA,QACA;AACA,aAAO,sBAAM,QAAQ;AAAA,IACnB,OAAO,aAAa;AAAA,MAClB,gBAAgB;AAAA,QACd,UAAU,MAAM;AAAA,QAChB,SAAS,MAAM,0BAA0B,MAAM,aAAa;AAAA,MAC9D;AAAA,IACF;AAAA,IACA,QAAQ,OAAO,CAAC;AAAA,EAClB,CAAC;AACH;AAEA,eAAsB,cAAc,MAKjC;AACD,QAAM,uBAAuB,MAAM;AAAA,IACjC,KAAK;AAAA,IACL,KAAK;AAAA,EACP;AAEA,MAAI;AACF,UAAM,EAAE,KAAK,IAAI,MAAM;AAAA,MACrB;AAAA,QACE,MAAM;AAAA,QACN,WAAW,KAAK;AAAA,MAClB;AAAA,MACA,UAAU;AAAA,QACR,qBAAqB,KAAK;AAAA,QAC1B,SAAS,QAAQ;AAAA,QACjB,GAAG;AAAA,QACH,GAAI,KAAK,cAAc,oBAAoB,MAAM;AAAA,UAC/C,oBAAoB;AAAA,YAClB,SAAS,QAAQ;AAAA,UACnB;AAAA,QACF;AAAA,MACF,CAAC;AAAA,MACD,EAAE,SAAS,GAAG,YAAY,IAAI,IAAK;AAAA,IACrC;AAEA,UAAM,SAAS,wBAAwB,UAAU,IAAI;AAErD,QAAI,CAAC,OAAO,SAAS;AACnB,YAAM,IAAI,SAAS;AAAA,QACjB,MAAM,aAAa,yBAAyB;AAAA,QAC5C,MAAM,EAAE,KAAK;AAAA,QACb,OAAO,OAAO;AAAA,MAChB,CAAC;AAAA,IACH;AAEA,WAAO,OAAO,KAAK;AAAA,EACrB,SAAS,GAAG;AACV,UAAM,IAAI,SAAS;AAAA,MACjB,MAAM,aAAa,mBAAmB;AAAA,MACtC,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;AAEA,eAAsB,oBAAoB;AAAA,EACxC;AAAA,EACA;AACF,GAGG;AACD,QAAM,mBAAmB,MAAM;AAAA,IAC7B,YAAY;AACV,UAAI;AACF,cAAM,EAAE,KAAK,IAAI,MAAM;AAAA,UACrB;AAAA,YACE,MAAM;AAAA,YACN;AAAA,UACF;AAAA,UACA,cAAc;AAAA,YACZ;AAAA,UACF,CAAC;AAAA,UACD,EAAE,SAAS,EAAE;AAAA,QACf;AAEA,cAAM,SAAS,4BAA4B,UAAU,IAAI;AAEzD,YAAI,CAAC,OAAO,SAAS;AACnB,gBAAM,IAAI,SAAS;AAAA,YACjB,MAAM,aAAa,6BAA6B;AAAA,YAChD,MAAM,EAAE,KAAK;AAAA,YACb,OAAO,OAAO;AAAA,UAChB,CAAC;AAAA,QACH;AAEA,cAAM,SAAS,OAAO,KAAK,WAAW;AAGtC,YAAI,WAAW,0BAA0B,aAAa;AACpD,iBAAO;AAAA,QACT;AAEA,eAAO,SAAS,YAAY,MAAM;AAAA,MACpC,SAAS,KAAK;AACZ,cAAM,IAAI,SAAS;AAAA,UACjB,MAAM,aAAa,4BAA4B;AAAA,UAC/C,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IACA;AAAA;AAAA,MAEE,UAAU,IAAI;AAAA;AAAA,MAEd,SAAS,IAAI,KAAK;AAAA,IACpB;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}