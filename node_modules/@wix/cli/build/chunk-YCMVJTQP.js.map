{"version":3,"sources":["../../document-management-client/src/document-management-client.ts","../../document-management-client/src/schemas.ts","../../document-management-client/src/useDocumentManagementClient.ts","../../document-management-client/src/index.ts"],"sourcesContent":["import type { HttpClient } from '@wix/cli-http-client';\nimport pRetry from 'p-retry';\nimport type { Options } from 'p-retry';\nimport pWaitFor from 'p-wait-for';\nimport { variant, fields } from 'variant';\nimport type { VariantOf } from 'variant';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\nimport { getTestOverrides } from '@wix/cli-test-overrides';\nimport {\n  getDeployment,\n  publishDeployment,\n  getDeploymentPipelineDescription,\n} from '@wix/ambassador-document-management-editor-deployments-v1-deployment/http';\nimport { DeploymentPipelinesStatus } from '@wix/ambassador-document-management-editor-deployments-v1-deployment/types';\nimport {\n  getDeploymentSchema,\n  getDeploymentPipelineDescriptionSchema,\n} from './schemas.js';\n\nconst { minRetryTimeout, pollInterval } = getTestOverrides();\n\nconst VELO_PIPELINE_ID = '5c696513-2584-4f19-ae0f-a559dd649482';\n\nexport const DeploymentStatus = variant({\n  Success: {},\n  Error: fields<{ deploymentError: CliError }>(),\n});\nexport type DeploymentStatus = VariantOf<typeof DeploymentStatus>;\n\nexport class DocumentManagementClient {\n  private readonly retryOptions: Options;\n\n  constructor(private readonly httpClient: HttpClient) {\n    this.retryOptions = {\n      retries: 1,\n      minTimeout: minRetryTimeout,\n      maxTimeout: 3 * 1000,\n    };\n  }\n\n  getDeploymentDetails = async (deploymentId: string) => {\n    const deploymentStatus = await this.getDeploymentStatus(deploymentId);\n\n    if (deploymentStatus === DeploymentPipelinesStatus.ERROR) {\n      const tasksDescriptions =\n        await this.getDeploymentTasksDescriptions(deploymentId);\n\n      return DeploymentStatus.Error({\n        deploymentError: new CliError({\n          code: CliErrorCode.DeploymentPipelineFailed({ tasksDescriptions }),\n          cause: null,\n        }),\n      });\n    }\n\n    return DeploymentStatus.Success();\n  };\n\n  private getDeploymentStatus = async (deploymentId: string) => {\n    try {\n      return await pWaitFor(\n        async () => {\n          const { data } = await pRetry(\n            () => this.httpClient.request(getDeployment({ deploymentId })),\n            this.retryOptions\n          );\n\n          const result = getDeploymentSchema.safeParse(data);\n\n          if (!result.success) {\n            throw new CliError({\n              code: CliErrorCode.InvalidGetDeploymentResponse(),\n              cause: result.error,\n              info: { data },\n            });\n          }\n\n          const { deploymentPipelinesStatus: status } = result.data.deployment;\n\n          // Continue polling\n          if (status === DeploymentPipelinesStatus.IN_PROGRESS) {\n            return false;\n          }\n\n          return pWaitFor.resolveWith(status);\n        },\n        {\n          // Poll each 2 seconds\n          interval: pollInterval ?? 2 * 1000,\n          // Fail if 2 minutes passed\n          timeout: 2 * 60 * 1000,\n        }\n      );\n    } catch (error) {\n      throw new CliError({\n        code: CliErrorCode.FailedToGetDeploymentStatus(),\n        cause: error,\n      });\n    }\n  };\n\n  private getDeploymentTasksDescriptions = async (deploymentId: string) => {\n    try {\n      const { data } = await pRetry(\n        () =>\n          this.httpClient.request(\n            getDeploymentPipelineDescription({\n              deploymentId,\n              deploymentPipelinesIds: [VELO_PIPELINE_ID],\n            })\n          ),\n        this.retryOptions\n      );\n\n      const result = getDeploymentPipelineDescriptionSchema.safeParse(data);\n\n      if (!result.success) {\n        throw new CliError({\n          code: CliErrorCode.InvalidGetDeploymentPipelineDescriptionResponse(),\n          cause: result.error,\n          info: { data },\n        });\n      }\n\n      const veloPipeline = result.data.pipelinesDescription.find(\n        (item) => item.deploymentPipelineId === VELO_PIPELINE_ID\n      );\n\n      return veloPipeline?.tasksDescriptions ?? [];\n    } catch (e) {\n      throw new CliError({\n        code: CliErrorCode.FailedToGetDeploymentPipelineDescription(),\n        cause: e,\n      });\n    }\n  };\n\n  publishDeployment = async (deploymentId: string) => {\n    try {\n      await this.httpClient.request(\n        publishDeployment({ deploymentId, skipPipelineCheck: true })\n      );\n    } catch (error) {\n      throw new CliError({\n        code: CliErrorCode.FailedToPublishDeployment(),\n        cause: error,\n      });\n    }\n  };\n}\n","import { z } from 'zod';\nimport {\n  TaskStatus,\n  DeploymentPipelinesStatus,\n} from '@wix/ambassador-document-management-editor-deployments-v1-deployment/types';\n\nexport const getDeploymentSchema = z.object({\n  deployment: z.object({\n    deploymentPipelinesStatus: z.enum([\n      DeploymentPipelinesStatus.IN_PROGRESS,\n      DeploymentPipelinesStatus.SUCCESS,\n      DeploymentPipelinesStatus.ERROR,\n    ]),\n  }),\n});\n\nconst taskDescriptionSchema = z.object({\n  taskName: z.string(),\n  status: z\n    .string()\n    .transform((value) =>\n      value === TaskStatus.SUCCESS ? TaskStatus.SUCCESS : TaskStatus.ERROR\n    ),\n  description: z\n    .string()\n    .nullish()\n    .transform((value, ctx) => {\n      try {\n        return value ? JSON.parse(value) : {};\n      } catch {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Invalid JSON',\n        });\n      }\n\n      return value;\n    })\n    .pipe(z.record(z.string(), z.string())),\n});\n\nexport const getDeploymentPipelineDescriptionSchema = z.object({\n  pipelinesDescription: z.array(\n    z.object({\n      deploymentPipelineId: z.string(),\n      tasksDescriptions: z.array(taskDescriptionSchema),\n    })\n  ),\n});\n","import { useMemo } from 'react';\nimport { useHttpClient } from '@wix/cli-http-client-react';\nimport { DocumentManagementClient } from './document-management-client.js';\n\nexport function useDocumentManagementClient(): DocumentManagementClient {\n  const httpClient = useHttpClient({ type: 'editor' });\n  return useMemo(() => new DocumentManagementClient(httpClient), [httpClient]);\n}\n","export {\n  DeploymentStatus,\n  DocumentManagementClient,\n} from './document-management-client.js';\nexport { useDocumentManagementClient } from './useDocumentManagementClient.js';\n"],"mappings":"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","names":[]}