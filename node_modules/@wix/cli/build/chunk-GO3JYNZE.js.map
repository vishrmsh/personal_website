{"version":3,"sources":["../../../node_modules/@wix/bi-logger-dev-tools-data/src/v2/index.ts"],"sourcesContent":["import { LogObject, arkGradualRolloutEndedParams, arkGradualRolloutStartedParams, arkGradualRolloutStepChangedParams, arkNewProjectOnboardedParams, arkProjectOptedInParams, arkProjectOptedOutParams, arkSlackAlertSentParams, autofixPrMergedParams, autofixReportSentParams, buildEndParams, buildStartParams, ciPoliceDeadlineScheduleParams, ciPoliceMsTrackerButtonActionParams, ciPoliceMsTrackerOptOutDialogParams, ciPoliceMsTrackerOptOutDialogRulesAndProjectsParams, ciPoliceNumberOfTargetsParams, ciPoliceTicketPageLoadParams, ciPoliceTicketProjectButtonActionParams, ciPoliceTicketRuleButtonActionParams, createProjectParams, deadlineAlertParams, emergencyOptOutDialogActionParams, executiveSummaryChangeTeamSrc11Evid3325Params, executiveSummaryCommitToDeadlineSrc11Evid3323Params, executiveSummaryCustomTimeRangeSrc11Evid3324Params, executiveSummaryEmailSentSrc11Evid3320Params, executiveSummaryEnterOverviewSrc11Evid3321Params, executiveSummaryMovingBetweenTabsSrc11Evid3322Params, fetchFallbackParams, fixButtonClickedParams, lokiRepoUpdateCreatedParams, lokiScheduleChangedParams, lokiUpdateMergedParams, lokiUpdatePrOpenedParams, lokiUpdatePrResultParams, lokiUpdateSkippedParams, panoramaAlertSentParams, panoramaAlertUserMarkParams, panoramaButtonActionParams, panoramaEnableDisableAlertsSrc11Evid104503Params, panoramaNewTransactionParams, panoramaPageVisitParams, panoramaSlackButtonActionParams, perferBundleResultParams, perferClickOnResetArtifactSBaselineButtonParams, perferMetricResultParams, perferReportOpenedParams, perferResetArtifactSBaselineParams, perferRunFinishedParams, perferRunResultParams, perferRunStartParams, perferTestCaseResultParams, perferTestEndedParams, perferTestResultParams, perferTestStartedParams, projectAddedToIgnoreListParams, projectPerformedEmergencyOptOutOfRuleParams, projectRemovedFromIgnoreListParams, projectResultReportedParams, ruleBuildBreakingScheduledParams, ruleDryRunChangedParams, ruleResultReportedParams, ruleShouldSendAlertsToggledParams, ruleStatusChangedParams, sledMergeQueueManualClickSrc11Evid90599Params, sledMergeQueueRunSrc11Evid90600Params, startInitParams, viewPrButtonClickParams, violationsDeadlineSrc11Evid3319Params, weeklyReportButtonActionParams, weeklyStatusReportParams, wixCliActionParams, wixCliAppFlowAppCloudServerUploadedSrc11Evid5235Params, wixCliAppFlowAppGenerationAppGenerationEndParams, wixCliAppFlowAppGenerationExistingAppSelectedParams, wixCliAppFlowAppGenerationNewAppNameEnteredParams, wixCliAppFlowAppGenerationNewAppRegistrationEndParams, wixCliAppFlowAppGenerationTypeOfCreationSelectedParams, wixCliAppFlowAppTemplateSelectionsParams, wixCliAppFlowComponentInstalledInTheAppParams, wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEndParams, wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStartParams, wixCliAppFlowDevelopmentSiteDevelopmentSiteSetParams, wixCliAppFlowDevelopmentSiteExistingSiteSelectedParams, wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEndParams, wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStartParams, wixCliAppFlowDevelopmentSiteSiteSelectorAbortedParams, wixCliAppFlowDevelopmentSiteSiteSelectorOpenedParams, wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelectedParams, wixCliAppFlowExtensionGenerationExtensionWasAddedParams, wixCliAppFlowFileUploadStartedParams, wixCliAppFlowStepsAnswersParams, wixCliAppFlowUploadEndedParams, wixCliAppFlowZipUploadDoneParams, wixCliAppsFlowDeploymentRequestSrc11Evid5234Params, wixCliAppsFlowDeploymentStatusSrc11Evid5232Params, wixCliAppsFlowTunnelCreationStatusSrc11Evid5233Params, wixCliCliCommandParams, wixCliCliCommandStatusParams, wixCliCliErrorParams, wixCliCliMessageDisplayedParams, wixCliCodeHasBeenChangedParams, wixCliFileFolderCreatedRenamedDeletedParams, wixCliLoginEndParams, wixCliLoginStartParams, wixCliReadyForReloadAfterCodeChangeParams, wixCliUserResponseToCliMessageParams, wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404Params, wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402Params, wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403Params, wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326Params, wixStandardsEndFalconRunTimeExperimentSrc11Evid33101Params, wixStandardsInitialExtensionWasAddedSrc11Evid3316Params, wixStandardsOptOutRequestsApplicationActionSrc11Evid3345Params, wixStandardsOptOutRequestsApplicationClickSrc11Evid3344Params, wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332Params, wixStandardsStartFalconRunTimeExperimentSrc11Evid33100Params, wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633Params, yoshiCodeChangeDetectedParams, yoshiReadyForReloadAfterCodeChangeParams, yoshiTestsRunEndParams, yoshiTestsRunStartParams, yoshiYarnStartFinishedParams } from '../types';\n\n/**\n * A function to create a log object for the 'panoramaNewTransaction' event (evid: 104401)\n *\n * Event description: Sent every time there is a new transaction in click house\n *\n * @param {panoramaNewTransactionParams} params - The parameters for this event\n * @property {string} result - The result of receiving different data (can be Added/Removed)\n * @property {string} componentId - The name of the component\n * @property {string} fullArtifactId - The full artifact name\n * @property {string} platform - The platform of the artifact\n * @property {string} transaction - The transaction type (can be component load/http request etc), if transaction is component load and result = new , this means a new was dashboard created)\n * @return {LogObject<panoramaNewTransactionParams>} LogObject<panoramaNewTransactionParams>\n */\nexport function panoramaNewTransaction(params: panoramaNewTransactionParams): LogObject<panoramaNewTransactionParams> {\n  return { evid: 104401, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'panoramaAlertSent' event (evid: 104501)\n *\n * Event description: Sent every time Panorama sends a slack notification (or when sending fails)\n *\n * @param {panoramaAlertSentParams} params - The parameters for this event\n * @property {string} failedToSend - IF message has failed to send will contain the reason of failure else null\n * @property {string} slackId - The id of the slack message can use to connect between events (104501 & 104502)\n * @property {string} state - The state of the alert (can be ‘ok’/’alerting’)\n * @property {string} currentTimeInterval - duration string i.e. 5M\n * @property {number} alertingValue - The (problematic) value for which alert was fired\n * @property {string} messageStatus - The status of the slack message (sent/failed - {reason}/disabled - {details})\n * @property {GUID} alertId - Alert id (can be used to connect to event Alert Sent 105501)\n * @property {string} componentId - The name of the component\n * @property {string} alertMethod - This parameter marks how the alert was sent to the project owners. It can be by Opsgenie integration (if the owner uses Opsgenie) or else it will be sent through Slack directly (possible values: opsgenie or panorama-slack-bot). Alerts sent through Opsgenie will have slack_id = null.\n * @property {boolean} isExperimental - Marks whether the alert is sent from an experimental template for testing queries (i.e. this alert is not sent to users)\n * @property {string} fullArtifactId - The full artifact name\n * @property {number} affectedSessionsCount - The number of sessions affected when the alert  started (meaning state = 'alerting') or when alert was resolved (meaning alert = 'ok')\n * @property {string} alertType - Type of fired alert (currently ‘success rate’/duration’)\n * @property {number} threshold - The current threshold for the panel from which the alert was sent\n * @property {string} platform - The platform of the artifact\n * @property {number} throughput - The current traffic when the alert was fired\n * @property {string} transactionName - The transaction type (can be component load/http request etc)\n * @return {LogObject<panoramaAlertSentParams>} LogObject<panoramaAlertSentParams>\n */\nexport function panoramaAlertSent(params: panoramaAlertSentParams): LogObject<panoramaAlertSentParams> {\n  return { evid: 104501, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'panoramaSlackButtonAction' event (evid: 104502)\n *\n * Event description: Sent every time a user clicks on one of the buttons in the slack message (can be connected to event 104501 using slack id)\n *\n * @param {panoramaSlackButtonActionParams} params - The parameters for this event\n * @property {string} slackId - The id of the slack message can use to connect between events (104501 & 104502)\n * @property {string} buttonAction - The button clicked by the user (currently - alerting graph/ investigation dashboard)\n * @property {GUID} alertId - Alert Id\n * @return {LogObject<panoramaSlackButtonActionParams>} LogObject<panoramaSlackButtonActionParams>\n */\nexport function panoramaSlackButtonAction(params: panoramaSlackButtonActionParams): LogObject<panoramaSlackButtonActionParams> {\n  return { evid: 104502, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'panoramaEnableDisableAlertsSrc11Evid104503' event (evid: 104503)\n *\n * Event description: Sent per transaction every time a user enables/disables panorama alerts (If the state does not change, no event will be sent for the particular transaction)\n *\n * @param {panoramaEnableDisableAlertsSrc11Evid104503Params} params - The parameters for this event\n * @property {string} entityType - 'Artifact' / 'Component' / 'Transaction' depends on the level which the operation performed\n * @property {string} fullArtifactId - Artifact id\n * @property {string} componentId - Component id\n * @property {string} transactionName - Transaction name\n * @property {string} operation - 'Enable'/'Disable'\n * @property {string} userEmail - The user email (without the @wix.com) who executed the operation\n * @return {LogObject<panoramaEnableDisableAlertsSrc11Evid104503Params>} LogObject<panoramaEnableDisableAlertsSrc11Evid104503Params>\n */\nexport function panoramaEnableDisableAlertsSrc11Evid104503(params: panoramaEnableDisableAlertsSrc11Evid104503Params): LogObject<panoramaEnableDisableAlertsSrc11Evid104503Params> {\n  return { evid: 104503, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'panoramaPageVisit' event (evid: 104601)\n *\n * Event description: Sent every time a user visits Panorama - breakdown or overview in dev portal\n *\n * @param {panoramaPageVisitParams} params - The parameters for this event\n * @property {GUID} alertId - alert id\n * @property {string} componentId - The name of the component (if the page visited is overview this field will be null)\n * @property {string} userEmail - The email of the user performing a visit\n * @property {string} anomalyType - Type of anomaly error (currently ‘success rate’/duration’)\n * @property {string} fullArtifactId - The full artifact name\n * @property {string} sessionId - A session id helping is to identify a users distinct visit\n * @property {string} alertType - Type of fired alert (currently ‘success rate’/duration’)\n * @property {string} pageName - The name of the page we're in (currently 'breakdown' or ' overview')\n * @property {string} transactionName - The transaction type (can be component load/http request etc) if the page visited is overview this field will be null\n * @return {LogObject<panoramaPageVisitParams>} LogObject<panoramaPageVisitParams>\n */\nexport function panoramaPageVisit(params: panoramaPageVisitParams): LogObject<panoramaPageVisitParams> {\n  return { evid: 104601, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'panoramaButtonAction' event (evid: 104602)\n *\n * Event description: Sent every time a user clicks on one of the buttons in Panorama dev portal (can be connected to event 104601 using session id)\n *\n * @param {panoramaButtonActionParams} params - The parameters for this event\n * @property {string} userEmail - User email without \"@wix.com\"\n * @property {string} sessionId - A session id helping is to identify a users visit\n * @property {string} buttonClicked - The name of the section clicked\n * @property {string} action - The action committed (currently 'collapse'/ 'hide')\n * @return {LogObject<panoramaButtonActionParams>} LogObject<panoramaButtonActionParams>\n */\nexport function panoramaButtonAction(params: panoramaButtonActionParams): LogObject<panoramaButtonActionParams> {\n  return { evid: 104602, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'panoramaAlertUserMark' event (evid: 105501)\n *\n * Event description: Sent when user markes alert as FalsePositive or TruePositive\n *\n * @param {panoramaAlertUserMarkParams} params - The parameters for this event\n * @property {GUID} alertId - Alert id (can be used to connect to event Alert Sent 104501)\n * @property {string} markedBy - User who marked the alert (without the @wix suffix)\n * @property {string} userMark - FalsePositive or TruePositive\n * @return {LogObject<panoramaAlertUserMarkParams>} LogObject<panoramaAlertUserMarkParams>\n */\nexport function panoramaAlertUserMark(params: panoramaAlertUserMarkParams): LogObject<panoramaAlertUserMarkParams> {\n  return { evid: 105501, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowAppTemplateSelections' event (evid: 114003)\n *\n * Event description: The event will be sent when the user selects anything regarding templates - if he chooses to start from a template or scratch, which template he chooses.\n *\n * @param {wixCliAppFlowAppTemplateSelectionsParams} params - The parameters for this event\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} question - Template or from scratch, which template\n * @property {string} answer - the user choice (template/from scratch, template guid)\n * @property {string} additionalInfo - Any additional info needed, at the which template question - template name\n * @return {LogObject<wixCliAppFlowAppTemplateSelectionsParams>} LogObject<wixCliAppFlowAppTemplateSelectionsParams>\n */\nexport function wixCliAppFlowAppTemplateSelections(params: wixCliAppFlowAppTemplateSelectionsParams): LogObject<wixCliAppFlowAppTemplateSelectionsParams> {\n  return { evid: 114003, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'fetchFallback' event (evid: 114700)\n *\n * Event description: This event is sent when the navigator.sendBeacon() request failed to enqueue, in which case we fallback to a fetch() request.\n *\n * @param {fetchFallbackParams} params - The parameters for this event\n * @property {number} batchLength - The number of batch items\n * @property {number} batchSize - The size in bytes of the reported batch\n * @property {string} batchItems - Comma-separated serialized items\n * @property {GUID} sessionId - session_id\n * @property {string} platform - platform\n * @return {LogObject<fetchFallbackParams>} LogObject<fetchFallbackParams>\n */\nexport function fetchFallback(params: fetchFallbackParams): LogObject<fetchFallbackParams> {\n  return { evid: 114700, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'projectResultReported' event (evid: 3301)\n *\n * Event description: Sent when project results reported\n *\n * @param {projectResultReportedParams} params - The parameters for this event\n * @property {number} amount_failing - amount failing\n * @property {number} amount_passing - amount passing\n * @property {number} amount_warning - amount warning\n * @property {number} amount_disabled - amount disabled\n * @property {number} amountRegressedToWarning - How many rules passed in previous project build, and now get a warning. This number should be <= amount_warning.\n * @property {number} amountRegressedToFailing - How many rules passed or got a warning in previous project build, and now fail. This number should be <= amount_failing.\n * @property {number} amountIgnored - How many rules are ignored for this project\n * @property {string} project_name - project name\n * @return {LogObject<projectResultReportedParams>} LogObject<projectResultReportedParams>\n */\nexport function projectResultReported(params: projectResultReportedParams): LogObject<projectResultReportedParams> {\n  return { evid: 3301, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'projectAddedToIgnoreList' event (evid: 3302)\n *\n * Event description: Sent every time a rule is added to ignore list for a specific project and specific violation (when it's relevant)\n *\n * @param {projectAddedToIgnoreListParams} params - The parameters for this event\n * @property {DateTime} expirationDate - If the project is TEMPORARILY opting out of the rule (= ignored), then this will be the end of the ignore period. Otherwise (indefinite ignore), then null.\n * @property {string} addedBy - Who added the project to ignore list\n * @property {boolean} isTemporary - TRUE if the project is opting out of the rule temporarily; FALSE otherwise (indefinite ignore).\n * @property {string} rule_name - rule name\n * @property {boolean} isExtend - TRUE if the opt out of the project for this rule is extension of a previous opt out, FALSE otherwise (new opt out)\n * @property {string} violationId - A violation id that indicated where in the code the violation was made\n * @property {string} project_name - project name\n * @property {string} applicationGroupId - the group id of the application\n * @property {string} applicationItemId - the item id of the application\n * @property {boolean} isQualityOwner - If the added_by value is the quality owner who accept the request for an extension so is_quality_owner gets True, otherwise False.\n * @return {LogObject<projectAddedToIgnoreListParams>} LogObject<projectAddedToIgnoreListParams>\n */\nexport function projectAddedToIgnoreList(params: projectAddedToIgnoreListParams): LogObject<projectAddedToIgnoreListParams> {\n  return { evid: 3302, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ruleDryRunChanged' event (evid: 3303)\n *\n * Event description: Sent when dry run status changed (dry run on = grace period)\n *\n * @param {ruleDryRunChangedParams} params - The parameters for this event\n * @property {string} toggleSource - \"Rule Configuration\"/\"Scheduled Break\"\n * @property {boolean} is_dry_run_on - new dry run status true - on, false - off\n * @property {string} rule_name - rule name\n * @return {LogObject<ruleDryRunChangedParams>} LogObject<ruleDryRunChangedParams>\n */\nexport function ruleDryRunChanged(params: ruleDryRunChangedParams): LogObject<ruleDryRunChangedParams> {\n  return { evid: 3303, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ruleResultReported' event (evid: 3304)\n *\n * Event description: Sent once a day with aggregated results for each rule\n *\n * @param {ruleResultReportedParams} params - The parameters for this event\n * @property {number} amount_opt_out_warning - amount of rules that opt out while warning\n * @property {number} amount_failing - amount failing\n * @property {number} amount_passing - amount passing\n * @property {number} amount_warning - amount warning\n * @property {number} amount_disabled - amount disabled\n * @property {string} ruleGroup - To which group does the rule belong: \"Business Manager\", \"BI\", \"Core Services\", \"Contacts\", \"Mobile\", \"Sled\", \"Viewer\", \"General\", \"\"Scoped migration\", \"CI\", \"Node Platform\", \"Design Systems\", \"Performance\"\n * @property {string} runMode - The rule's run mode: production/development\n * @property {number} amount_opt_out_disabled - amount of rules that opt out while being disabled\n * @property {number} amount_opt_out_indefinitely - amount of rules that are opted out indefinitely\n * @property {string} rule_name - rule name\n * @property {number} amount_opt_out_failing - amount of rules that opt out while failing\n * @property {number} amount_opt_out_passing - amount of rules that opt out while passing\n * @return {LogObject<ruleResultReportedParams>} LogObject<ruleResultReportedParams>\n */\nexport function ruleResultReported(params: ruleResultReportedParams): LogObject<ruleResultReportedParams> {\n  return { evid: 3304, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'projectRemovedFromIgnoreList' event (evid: 3306)\n *\n * Event description: Sent every time a rule is removed from ignore list for a specific project and specific violation (when it's relevant)\n *\n * @param {projectRemovedFromIgnoreListParams} params - The parameters for this event\n * @property {string} ruleName - From which rule's ignore list has the project been removed\n * @property {string} projectName - Which project has been removed from the ignore list\n * @property {string} removedBy - Who removed the project from ignore list. If it's an automatic removal (because the ignore period expired)\n * @property {string} violationId - A violation id that indicated where in the code the violation was made\n * @property {string} removeMethod - \"manual\" (from CI Police rule configuration)/\"expired\" (ignore period expired, so rules has been automatically removed from ignore list)\n * @return {LogObject<projectRemovedFromIgnoreListParams>} LogObject<projectRemovedFromIgnoreListParams>\n */\nexport function projectRemovedFromIgnoreList(params: projectRemovedFromIgnoreListParams): LogObject<projectRemovedFromIgnoreListParams> {\n  return { evid: 3306, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ruleShouldSendAlertsToggled' event (evid: 3307)\n *\n * Event description: Sent once a day per rule the rule's run mode (Dev to Prod or the other way around), which also affects the setting of sending alerts (either from False to True or the other way around)\n *\n * @param {ruleShouldSendAlertsToggledParams} params - The parameters for this event\n * @property {string} ruleName - Which rule is being toggled\n * @property {string} prevRunMode - The rule's PREVIOUS run mode: production/development\n * @property {string} newRunMode - The rule's NEW run mode: production/development\n * @property {boolean} shouldSendAlerts - TRUE if the user chose to send alerts, FALSE otherwise\n * @return {LogObject<ruleShouldSendAlertsToggledParams>} LogObject<ruleShouldSendAlertsToggledParams>\n */\nexport function ruleShouldSendAlertsToggled(params: ruleShouldSendAlertsToggledParams): LogObject<ruleShouldSendAlertsToggledParams> {\n  return { evid: 3307, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ruleBuildBreakingScheduled' event (evid: 3308)\n *\n * Event description: Sent when a rule owner schedules the rule to start breaking builds at a certain date\n *\n * @param {ruleBuildBreakingScheduledParams} params - The parameters for this event\n * @property {string} ruleName - Which rule is being scheduled\n * @property {DateTime} gracePeriodStartDate - The date that the rule's grace period will begin\n * @property {DateTime} buildBreakingStartDate - The date that the rule will start breaking builds\n * @property {string} userName - The user name that scheduled  the rule (not the rule owner)\n * @return {LogObject<ruleBuildBreakingScheduledParams>} LogObject<ruleBuildBreakingScheduledParams>\n */\nexport function ruleBuildBreakingScheduled(params: ruleBuildBreakingScheduledParams): LogObject<ruleBuildBreakingScheduledParams> {\n  return { evid: 3308, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceDeadlineSchedule' event (evid: 3309)\n *\n * Event description: Sent every time violation_id has a new deadline (whether an initial deadline or committed to a new deadline)\n *\n * @param {ciPoliceDeadlineScheduleParams} params - The parameters for this event\n * @property {string} artifactId - artifact id\n * @property {string} ruleName - rule name\n * @property {string} userConfirm - The user who confirmed the new deadline (null if initial deadline). User email without \"@wix.com\".\n * @property {string} userCommit - The user who committed to a new deadline (null if initial deadline). User email without \"@wix.com\".\n * @property {DateTime} deadline - violation_id's deadline (whether an initial deadline or committed to a new deadline)\n * @property {string} violationId - violation id\n * @return {LogObject<ciPoliceDeadlineScheduleParams>} LogObject<ciPoliceDeadlineScheduleParams>\n */\nexport function ciPoliceDeadlineSchedule(params: ciPoliceDeadlineScheduleParams): LogObject<ciPoliceDeadlineScheduleParams> {\n  return { evid: 3309, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'projectPerformedEmergencyOptOutOfRule' event (evid: 3310)\n *\n * Event description: Sent every time a user requests an emergency opt out (24 hours) of a rule for a specific project (3302 is the event for non-emergency opt outs) and a specific violation\n *\n * @param {projectPerformedEmergencyOptOutOfRuleParams} params - The parameters for this event\n * @property {string} ruleName - From which rule is the project being opted out\n * @property {string} projectName - Name of project that is being opted out\n * @property {string} userEmail - Which user is opting out the project\n * @property {string} reason - Request's reason for emergency opt out\n * @property {string} violationId - violation_id\n * @property {number} consecutiveOptOuts - Number of consecutive EOOs per rule since the last time it was green\n * @return {LogObject<projectPerformedEmergencyOptOutOfRuleParams>} LogObject<projectPerformedEmergencyOptOutOfRuleParams>\n */\nexport function projectPerformedEmergencyOptOutOfRule(params: projectPerformedEmergencyOptOutOfRuleParams): LogObject<projectPerformedEmergencyOptOutOfRuleParams> {\n  return { evid: 3310, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsStartFalconRunTimeExperimentSrc11Evid33100' event (evid: 33100)\n *\n * Event description: Sent every time a Wix Standards Check is started\n *\n * @param {wixStandardsStartFalconRunTimeExperimentSrc11Evid33100Params} params - The parameters for this event\n * @property {string} projectName - project_name\n * @property {string} projectType - project_type\n * @property {string} mode - Represent the mode Wix Standards is running on\n * @property {GUID} taskId - guid for evert task as part of a build run\n * @property {GUID} buildRunId - guid for every build run\n * @property {string} repoName - Repository name\n * @return {LogObject<wixStandardsStartFalconRunTimeExperimentSrc11Evid33100Params>} LogObject<wixStandardsStartFalconRunTimeExperimentSrc11Evid33100Params>\n */\nexport function wixStandardsStartFalconRunTimeExperimentSrc11Evid33100(params: wixStandardsStartFalconRunTimeExperimentSrc11Evid33100Params): LogObject<wixStandardsStartFalconRunTimeExperimentSrc11Evid33100Params> {\n  return { evid: 33100, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsEndFalconRunTimeExperimentSrc11Evid33101' event (evid: 33101)\n *\n * Event description: Sent every time a Wix Standards Check is ended\n *\n * @param {wixStandardsEndFalconRunTimeExperimentSrc11Evid33101Params} params - The parameters for this event\n * @property {string} projectName - project name\n * @property {string} projectType - project type\n * @property {string} mode - Represent the mode Wix Standards is running on\n * @property {GUID} taskId - guid for evert task as part of a build run\n * @property {GUID} buildRunId - guid for every build run\n * @property {string} runStatus - status of the run\n * @property {string} repoName - Repository name\n * @return {LogObject<wixStandardsEndFalconRunTimeExperimentSrc11Evid33101Params>} LogObject<wixStandardsEndFalconRunTimeExperimentSrc11Evid33101Params>\n */\nexport function wixStandardsEndFalconRunTimeExperimentSrc11Evid33101(params: wixStandardsEndFalconRunTimeExperimentSrc11Evid33101Params): LogObject<wixStandardsEndFalconRunTimeExperimentSrc11Evid33101Params> {\n  return { evid: 33101, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'deadlineAlert' event (evid: 3311)\n *\n * Event description: This event is created for each deadline alert sent.\n *\n * @param {deadlineAlertParams} params - The parameters for this event\n * @property {string} ruleName - the name of the rule that failed\n * @property {DateTime} dateOfDeadline - the date of the actual deadline\n * @property {number} numOfAvailableAutofixes - shows number of projects in message where autofix is available\n * @property {string} ownershipTag - the name of the ownership tag\n * @property {number} numOfProjects - shows number of projects in message\n * @return {LogObject<deadlineAlertParams>} LogObject<deadlineAlertParams>\n */\nexport function deadlineAlert(params: deadlineAlertParams): LogObject<deadlineAlertParams> {\n  return { evid: 3311, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'fixButtonClicked' event (evid: 3312)\n *\n * Event description: This event is sent each time the \"fix button\" is pressed (in Robocop)\n *\n * @param {fixButtonClickedParams} params - The parameters for this event\n * @property {string} slackId - the id of the slack message (can use to connect between events 3315/3401/3312)\n * @property {string} projectName - the name of the project\n * @property {string} ownershipTag - the name of the ownershipTag\n * @return {LogObject<fixButtonClickedParams>} LogObject<fixButtonClickedParams>\n */\nexport function fixButtonClicked(params: fixButtonClickedParams): LogObject<fixButtonClickedParams> {\n  return { evid: 3312, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'autofixReportSent' event (evid: 3313)\n *\n * Event description: Sent when the process of creating a PR is finished (whether it was successful or not)\n *\n * @param {autofixReportSentParams} params - The parameters for this event\n * @property {number} numOfRulesUnfixed - num of rules that were unfixed (if any)\n * @property {string} projectName - the name of the project\n * @property {string} prURL - the link (url) of the PR, will be null if the pr wasn't created successfully (can result in general error/ zero diff/ fail)\n * @property {number} numOfRulesFixed - num of rules that were fixed\n * @property {string} ownershipTag - the owner of the project\n * @return {LogObject<autofixReportSentParams>} LogObject<autofixReportSentParams>\n */\nexport function autofixReportSent(params: autofixReportSentParams): LogObject<autofixReportSentParams> {\n  return { evid: 3313, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'viewPrButtonClick' event (evid: 3314)\n *\n * Event description: Sent for each view PR button click (relevant only if the pr was created successfully in evid 3313)\n *\n * @param {viewPrButtonClickParams} params - The parameters for this event\n * @property {string} projectName - the name of the project\n * @property {string} prURL - the link (url) of the pr\n * @property {string} ownershipTag - the name of the ownership tag\n * @property {string} userName - user name that pressed on the pr (taken from slack)\n * @return {LogObject<viewPrButtonClickParams>} LogObject<viewPrButtonClickParams>\n */\nexport function viewPrButtonClick(params: viewPrButtonClickParams): LogObject<viewPrButtonClickParams> {\n  return { evid: 3314, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'weeklyReportButtonAction' event (evid: 3315)\n *\n * Event description: Sent every time a user clicks a button out of the different options on the weekly report.\n *\n * @param {weeklyReportButtonActionParams} params - The parameters for this event\n * @property {string} slackId - the id of the slack message (can use to connect between events 3315/3401/3312)\n * @property {string} ruleName - the rule for which the button was clicked (can be null if the button clicked is 'full report' / 'alert settings')\n * @property {string} projectName - the project name\n * @property {string} buttonAction - the button clicked by the user (currently 'learn more' / 'get support' / 'full report' / 'alert settings' )\n * @property {string} ruleState - the state ('warning' / 'failed') of the rule for which the button was clicked (should be null if the button is 'full report' / 'alert settings'\n * @property {string} ownershipTag - Name of the ownership tag\n * @return {LogObject<weeklyReportButtonActionParams>} LogObject<weeklyReportButtonActionParams>\n */\nexport function weeklyReportButtonAction(params: weeklyReportButtonActionParams): LogObject<weeklyReportButtonActionParams> {\n  return { evid: 3315, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsInitialExtensionWasAddedSrc11Evid3316' event (evid: 3316)\n *\n * Event description: Sent every time Initial Extension feature is changing (On/Off)\n *\n * @param {wixStandardsInitialExtensionWasAddedSrc11Evid3316Params} params - The parameters for this event\n * @property {string} ruleName - Rule name\n * @property {number} threshold - The number of days beyond the original deadline in which extension requests will still be sent to the quality owner and not (yet) to the rule owner. 0 means feature turn off.\n * @return {LogObject<wixStandardsInitialExtensionWasAddedSrc11Evid3316Params>} LogObject<wixStandardsInitialExtensionWasAddedSrc11Evid3316Params>\n */\nexport function wixStandardsInitialExtensionWasAddedSrc11Evid3316(params: wixStandardsInitialExtensionWasAddedSrc11Evid3316Params): LogObject<wixStandardsInitialExtensionWasAddedSrc11Evid3316Params> {\n  return { evid: 3316, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ruleStatusChanged' event (evid: 3317)\n *\n * Event description: Sent every time CI Police runs (for each rule and project result)\n *\n * @param {ruleStatusChangedParams} params - The parameters for this event\n * @property {string} ruleName - The rule name\n * @property {string} projectName - The project name\n * @property {number} numOfViolationsOptedOut - The number of violations that opted out (regardless of their status) in this run\n * @property {string} repoName - The repo name\n * @property {number} numOfViolationsFailing - The number of violations that failed in this run\n * @property {string} status - The status of the run (fail/pass/warning/disabled/opt_out_disabled/opt_out_failing/opt_out_indefinitely/opt_out_passing/opt_out_warning)\n * @property {number} numOfViolationsWarning - The number of violations that had a warning status in this run\n * @return {LogObject<ruleStatusChangedParams>} LogObject<ruleStatusChangedParams>\n */\nexport function ruleStatusChanged(params: ruleStatusChangedParams): LogObject<ruleStatusChangedParams> {\n  return { evid: 3317, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceNumberOfTargets' event (evid: 3318)\n *\n * Event description: Reports the number of unique targets in Bazel build that triggers CI Police\n *\n * @param {ciPoliceNumberOfTargetsParams} params - The parameters for this event\n * @property {number} numOfTargets - the number of unique targets in Bazel build that triggers CI Police\n * @return {LogObject<ciPoliceNumberOfTargetsParams>} LogObject<ciPoliceNumberOfTargetsParams>\n */\nexport function ciPoliceNumberOfTargets(params: ciPoliceNumberOfTargetsParams): LogObject<ciPoliceNumberOfTargetsParams> {\n  return { evid: 3318, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'violationsDeadlineSrc11Evid3319' event (evid: 3319)\n *\n * Event description: Sent every time a violation has a new deadline \n *\n * @param {violationsDeadlineSrc11Evid3319Params} params - The parameters for this event\n * @property {string} ruleName - Rule name\n * @property {string} projectName - Project name\n * @property {string} violationId - Violation id\n * @property {DateTime} deadline - Current deadline of a violation\n * @property {string} violationStatus - Warning / Error\n * @property {string} deadlineOrigin - Committed to deadline / Committed to a new deadline / Emergency opt out / Permanent opt out etc.\n * @property {string} userEmail - The user in charge of the deadline as determined by it’s origin (if exists)\n * @return {LogObject<violationsDeadlineSrc11Evid3319Params>} LogObject<violationsDeadlineSrc11Evid3319Params>\n */\nexport function violationsDeadlineSrc11Evid3319(params: violationsDeadlineSrc11Evid3319Params): LogObject<violationsDeadlineSrc11Evid3319Params> {\n  return { evid: 3319, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'executiveSummaryEmailSentSrc11Evid3320' event (evid: 3320)\n *\n * Event description: Sent when an Email is sent to a manager\n *\n * @param {executiveSummaryEmailSentSrc11Evid3320Params} params - The parameters for this event\n * @property {string} userName - Username of the manager who got the email\n * @property {string} typeOfUser - Regular / Manager / MoM\n * @return {LogObject<executiveSummaryEmailSentSrc11Evid3320Params>} LogObject<executiveSummaryEmailSentSrc11Evid3320Params>\n */\nexport function executiveSummaryEmailSentSrc11Evid3320(params: executiveSummaryEmailSentSrc11Evid3320Params): LogObject<executiveSummaryEmailSentSrc11Evid3320Params> {\n  return { evid: 3320, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'executiveSummaryEnterOverviewSrc11Evid3321' event (evid: 3321)\n *\n * Event description: Sent when a manager press the link to vanguard via email or enter the overview dashboard manually\n *\n * @param {executiveSummaryEnterOverviewSrc11Evid3321Params} params - The parameters for this event\n * @property {string} userName - Username of the manager who entered the overview dashboard\n * @property {string} refferalInfo - Entry point ('Email' or 'Manual')\n * @property {string} typeOfUser - Regular / Manager / MoM\n * @return {LogObject<executiveSummaryEnterOverviewSrc11Evid3321Params>} LogObject<executiveSummaryEnterOverviewSrc11Evid3321Params>\n */\nexport function executiveSummaryEnterOverviewSrc11Evid3321(params: executiveSummaryEnterOverviewSrc11Evid3321Params): LogObject<executiveSummaryEnterOverviewSrc11Evid3321Params> {\n  return { evid: 3321, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'executiveSummaryMovingBetweenTabsSrc11Evid3322' event (evid: 3322)\n *\n * Event description: Sent every time user is moving from one tab (calendar preset) to another\n *\n * @param {executiveSummaryMovingBetweenTabsSrc11Evid3322Params} params - The parameters for this event\n * @property {string} userName - Username of the manager\n * @property {string} destinationTab - The tab (calendar preset) the user moved to\n * @property {string} typeOfUser - Regular / Manager / MoM\n * @return {LogObject<executiveSummaryMovingBetweenTabsSrc11Evid3322Params>} LogObject<executiveSummaryMovingBetweenTabsSrc11Evid3322Params>\n */\nexport function executiveSummaryMovingBetweenTabsSrc11Evid3322(params: executiveSummaryMovingBetweenTabsSrc11Evid3322Params): LogObject<executiveSummaryMovingBetweenTabsSrc11Evid3322Params> {\n  return { evid: 3322, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'executiveSummaryCommitToDeadlineSrc11Evid3323' event (evid: 3323)\n *\n * Event description: Sent when a manager committed to a deadline (new one or default) or permanently opt-out \n *\n * @param {executiveSummaryCommitToDeadlineSrc11Evid3323Params} params - The parameters for this event\n * @property {string} userName - Manager's username who conducted the action\n * @property {string} projectName - Project name\n * @property {string} ruleName - Rule name\n * @property {string} action - The action that was performed ('Commit', 'Commit to A Deadline', 'Permanently opt-out')\n * @property {DateTime} initialDeadline - The default deadline set by the rule owner\n * @property {DateTime} newDeadline - The new deadline committed by the manger (null if action = ‘Commit’ or action = ‘Permanently opt-out’)\n * @property {string} typeOfUser - Regular / Manager / MoM\n * @return {LogObject<executiveSummaryCommitToDeadlineSrc11Evid3323Params>} LogObject<executiveSummaryCommitToDeadlineSrc11Evid3323Params>\n */\nexport function executiveSummaryCommitToDeadlineSrc11Evid3323(params: executiveSummaryCommitToDeadlineSrc11Evid3323Params): LogObject<executiveSummaryCommitToDeadlineSrc11Evid3323Params> {\n  return { evid: 3323, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'executiveSummaryCustomTimeRangeSrc11Evid3324' event (evid: 3324)\n *\n * Event description: Sent when a user manually sets a custom time range\n *\n * @param {executiveSummaryCustomTimeRangeSrc11Evid3324Params} params - The parameters for this event\n * @property {string} userName - Manager's username who set a custom time range\n * @property {DateTime} startingDate - Starting date\n * @property {DateTime} closingDate - End date\n * @property {string} typeOfUser - Regular / Manager / MoM\n * @return {LogObject<executiveSummaryCustomTimeRangeSrc11Evid3324Params>} LogObject<executiveSummaryCustomTimeRangeSrc11Evid3324Params>\n */\nexport function executiveSummaryCustomTimeRangeSrc11Evid3324(params: executiveSummaryCustomTimeRangeSrc11Evid3324Params): LogObject<executiveSummaryCustomTimeRangeSrc11Evid3324Params> {\n  return { evid: 3324, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'executiveSummaryChangeTeamSrc11Evid3325' event (evid: 3325)\n *\n * Event description: Sent when a user manually changes the team view\n *\n * @param {executiveSummaryChangeTeamSrc11Evid3325Params} params - The parameters for this event\n * @property {string} userName - Manager's username who changed the team view\n * @property {string} impersonateUserName - The user to whom the manager changed the view\n * @property {string} typeOfUser - Regular / Manager / MoM\n * @return {LogObject<executiveSummaryChangeTeamSrc11Evid3325Params>} LogObject<executiveSummaryChangeTeamSrc11Evid3325Params>\n */\nexport function executiveSummaryChangeTeamSrc11Evid3325(params: executiveSummaryChangeTeamSrc11Evid3325Params): LogObject<executiveSummaryChangeTeamSrc11Evid3325Params> {\n  return { evid: 3325, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326' event (evid: 3326)\n *\n * Event description: Sent every time a popup message appears to the user\n *\n * @param {wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326Params} params - The parameters for this event\n * @property {string} projectName - Name of project that is being opted out\n * @property {string} userEmail - Which user is opting out the project\n * @property {string} action - \"Submit\" / \"Close\" (close button or x) \n * @property {string} rulesNamesArray - Array of rules names that are being opted out\n * @return {LogObject<wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326Params>} LogObject<wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326Params>\n */\nexport function wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326(params: wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326Params): LogObject<wixStandardsEmergencyOptOutPopupMessageSrc11Evid3326Params> {\n  return { evid: 3326, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332' event (evid: 3332)\n *\n * Event description: Sent every time a rule is rejected and not added to ignore list for a specific project and specific violation \n *\n * @param {wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332Params} params - The parameters for this event\n * @property {string} ruleName - rule name\n * @property {string} violationId - A violation id that indicated where in the code the violation was made\n * @property {string} projectName - project name\n * @property {string} applicationGroupId - the group id of the application\n * @property {string} applicationItemId - the item id of the application\n * @property {string} addedBy - who rejected the \n * the request\n * @return {LogObject<wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332Params>} LogObject<wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332Params>\n */\nexport function wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332(params: wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332Params): LogObject<wixStandardsProjectWasRejectedAndNotAddedToTheIgnoreListSrc11Evid3332Params> {\n  return { evid: 3332, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsOptOutRequestsApplicationClickSrc11Evid3344' event (evid: 3344)\n *\n * Event description: Sent every time a user click on an application\n *\n * @param {wixStandardsOptOutRequestsApplicationClickSrc11Evid3344Params} params - The parameters for this event\n * @property {string} request_status - pending/resolved\n * @property {string} action - handle/view\n * @property {string} ruleName - the name of the rule\n * @property {DateTime} requestedDate - the date of the request\n * @property {string} applicationGroupId - the id of application request\n * @property {string} requestType - new_deadline/permenat_opt_otu\n * @property {string} ruleOwnerEmail - the email of the rule owner\n * @property {string} projectOwnerEmail - the email of the project owner\n * @return {LogObject<wixStandardsOptOutRequestsApplicationClickSrc11Evid3344Params>} LogObject<wixStandardsOptOutRequestsApplicationClickSrc11Evid3344Params>\n */\nexport function wixStandardsOptOutRequestsApplicationClickSrc11Evid3344(params: wixStandardsOptOutRequestsApplicationClickSrc11Evid3344Params): LogObject<wixStandardsOptOutRequestsApplicationClickSrc11Evid3344Params> {\n  return { evid: 3344, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsOptOutRequestsApplicationActionSrc11Evid3345' event (evid: 3345)\n *\n * Event description: Sent every time a rule owner do an  action on an application group\n *\n * @param {wixStandardsOptOutRequestsApplicationActionSrc11Evid3345Params} params - The parameters for this event\n * @property {string} action - close/confirm\n * @property {string} Projects - projects json \n * @property {DateTime} requestedDate - the date of the request\n * @property {string} applicationGroupId - the id of application request\n * @property {string} requestType -  new deadline/permanent opt out)\n * @property {number} totalViolations - total violations\n * @property {string} ruleOwnerEmail - The email of the rule owner\n * @property {string} projectOwnerEmail - The email of the project owner\n * @return {LogObject<wixStandardsOptOutRequestsApplicationActionSrc11Evid3345Params>} LogObject<wixStandardsOptOutRequestsApplicationActionSrc11Evid3345Params>\n */\nexport function wixStandardsOptOutRequestsApplicationActionSrc11Evid3345(params: wixStandardsOptOutRequestsApplicationActionSrc11Evid3345Params): LogObject<wixStandardsOptOutRequestsApplicationActionSrc11Evid3345Params> {\n  return { evid: 3345, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'weeklyStatusReport' event (evid: 3401)\n *\n * Event description: Weekly reports for each project about failing and warning rules\n *\n * @param {weeklyStatusReportParams} params - The parameters for this event\n * @property {string} slackId - the id of the slack message (can use to connect between events 3315/3401/3312)\n * @property {string} result - the result of sending the message can be 'sent' | 'no_ownership_tag' | 'no_errors_or_warnings'\n * @property {string} slack_channel - slack channel\n * @property {number} numRulesFailed - amount of rules reported as failing\n * @property {number} numRulesWarning - amount of rules reported as warning\n * @property {string} ownership_tag - ownership tag\n * @property {number} numOfAvailableAutofixes - num of available projects to fix\n * @property {string} project_name - project name\n * @return {LogObject<weeklyStatusReportParams>} LogObject<weeklyStatusReportParams>\n */\nexport function weeklyStatusReport(params: weeklyStatusReportParams): LogObject<weeklyStatusReportParams> {\n  return { evid: 3401, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402' event (evid: 3402)\n *\n * Event description: Weekly reports per ownership tag\n *\n * @param {wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402Params} params - The parameters for this event\n * @property {string} slack_id - the id of the slack message (can use to connect between events 3315/3401/3312)\n * @property {string} slack_channel - slack channel \n * @property {string} ownership_tag - ownership tag\n * @property {boolean} is_empty - empty message (without upcoming violations)\n * @return {LogObject<wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402Params>} LogObject<wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402Params>\n */\nexport function wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402(params: wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402Params): LogObject<wixStandardsBotWeeklyAlertMessageWasSentSrc11Evid3402Params> {\n  return { evid: 3402, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403' event (evid: 3403)\n *\n * Event description: Weekly report per violation and ownership tag\n *\n * @param {wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403Params} params - The parameters for this event\n * @property {string} slack_id - the id of the slack message (can use to connect between events 3315/3401/3312)\n * @property {string} slack_channel - slack channel \n * @property {string} violation_status - error/warning\n * @property {string} ownership_tag - ownership tag\n * @property {string} project_name - project name\n * @property {string} violation_id - violation id\n * @property {string} rule_name - rule name\n * @property {DateTime} deadline - deadline of the violation yyyy-mm-dd\n * @property {DateTime} new_deadline - new_deadline \n * @property {number} rank - rank of the violation in the message\n * @return {LogObject<wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403Params>} LogObject<wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403Params>\n */\nexport function wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403(params: wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403Params): LogObject<wixStandardsBotWeeklyViolationAlertMessageWasSentSrc11Evid3403Params> {\n  return { evid: 3403, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404' event (evid: 3404)\n *\n * Event description: Button action for violation and ownership tag\n *\n * @param {wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404Params} params - The parameters for this event\n * @property {string} slack_id - the id of the slack message (can use to connect between events 3315/3401/3312)\n * @property {string} slack_channel - slack channel \n * @property {string} violation_status - error/warning\n * @property {string} ownership_tag - ownership tag\n * @property {string} project_name - project name\n * @property {string} violation_id - violation id\n * @property {string} rule_name - rule name\n * @property {DateTime} deadline - deadline of the violation yyyy-mm-dd\n * @property {DateTime} new_deadline - new_deadline \n * @property {number} rank - rank of the violation in the message\n * @property {string} button_action - the button clicked by the user (currently 'learn more' / 'get support' / 'full report' / 'alert settings' /'summary')\n * @return {LogObject<wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404Params>} LogObject<wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404Params>\n */\nexport function wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404(params: wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404Params): LogObject<wixStandardsBotWeeklyAlertMessageButtonActionSrc11Evid3404Params> {\n  return { evid: 3404, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'arkGradualRolloutStarted' event (evid: 3604)\n *\n * Event description: gradual rollout started\n *\n * @param {arkGradualRolloutStartedParams} params - The parameters for this event\n * @property {string} pipeline_name - pipe line type of the rollout\n * @property {string} onAlertBehavior - \"Acknowledge\"/\"Terminate\"\n * @property {string} version - version\n * @property {string} artifact_id - artifact_id\n * @property {string} rolloutId - A unique ID per rollout\n * @property {string} mode - progression mode - \"Auto\"/\"Manual\"\n * @property {number} timestampMs - The event's creation time\n * @property {string} artifact_type - artifact type\n * @property {string} deployment_id - Deployment id\n * @property {string} user - Who initiated the rollout\n * @return {LogObject<arkGradualRolloutStartedParams>} LogObject<arkGradualRolloutStartedParams>\n */\nexport function arkGradualRolloutStarted(params: arkGradualRolloutStartedParams): LogObject<arkGradualRolloutStartedParams> {\n  return { evid: 3604, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'arkGradualRolloutStepChanged' event (evid: 3605)\n *\n * Event description: gradual rollout step changed\n *\n * @param {arkGradualRolloutStepChangedParams} params - The parameters for this event\n * @property {string} step_name - step name\n * @property {string} onAlertBehavior - \"Acknowledge\"/\"Terminate\"\n * @property {string} exposure - traffic\n * @property {string} version - version\n * @property {string} artifact_id - artifact_id\n * @property {string} rolloutId - deployment ID\n * @property {string} mode - \"Auto\"/\"Manual\"\n * @property {number} timestampMs - The event's creation time\n * @property {string} artifact_type - artifact type\n * @property {string} user - Who is responsible for the step change\n * @return {LogObject<arkGradualRolloutStepChangedParams>} LogObject<arkGradualRolloutStepChangedParams>\n */\nexport function arkGradualRolloutStepChanged(params: arkGradualRolloutStepChangedParams): LogObject<arkGradualRolloutStepChangedParams> {\n  return { evid: 3605, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'arkGradualRolloutEnded' event (evid: 3606)\n *\n * Event description: gradual_rollout_ended\n *\n * @param {arkGradualRolloutEndedParams} params - The parameters for this event\n * @property {string} step_name - step name\n * @property {string} pipeline_name - pipe line type of the rollout\n * @property {string} onAlertBehavior - \"Acknowledge\"/\"Terminate\"\n * @property {string} reason - success, error, internal_error, push_GA_manually, stop_button_clicked\n * @property {string} exposure - traffic\n * @property {string} version - version\n * @property {string} artifact_id - artifact_id\n * @property {string} error_description - error_description (null if success)\n * @property {string} rolloutId - deployment ID\n * @property {string} mode - \"Auto\"/\"Manual\"\n * @property {number} timestampMs - The event's creation time\n * @property {string} artifact_type - artifact type\n * @property {string} user - Who is ending the rollout\n * @property {string} specific_reason - Extension of the 'reason' field. Holds the specific reason of a deployment error (free field).\n * @return {LogObject<arkGradualRolloutEndedParams>} LogObject<arkGradualRolloutEndedParams>\n */\nexport function arkGradualRolloutEnded(params: arkGradualRolloutEndedParams): LogObject<arkGradualRolloutEndedParams> {\n  return { evid: 3606, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'arkNewProjectOnboarded' event (evid: 3608)\n *\n * Event description: A new project has completed the ARK Onboarding process successfully\n *\n * @param {arkNewProjectOnboardedParams} params - The parameters for this event\n * @property {string} artifactId - Full artifact ID of project being onboarded (including group ID)\n * @property {string} onboardingMethod - \"Manual\"/\"Onboarding Site\"\n * @property {string} artifact_type - Server/Client/Business Manager/Fullstack/OOI App/Other\n * @return {LogObject<arkNewProjectOnboardedParams>} LogObject<arkNewProjectOnboardedParams>\n */\nexport function arkNewProjectOnboarded(params: arkNewProjectOnboardedParams): LogObject<arkNewProjectOnboardedParams> {\n  return { evid: 3608, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceTicketPageLoad' event (evid: 3620)\n *\n * Event description: Sent when the CI Police Ticket page has finished loaded for a certain project\n *\n * @param {ciPoliceTicketPageLoadParams} params - The parameters for this event\n * @property {string} projectName - Name of the project we are looking at\n * @property {string} tag - \"master\"/\"pr num X\"\n * @property {string} origin - How did we get to this page: \"CI\"/\"Slack\"/\"Rule Page\"/\"Falcon Github Comment\"\n * @property {string} sessionId - A unique session ID\n * @property {string} platform - \"dev-portal\"/\"station\"\n * @return {LogObject<ciPoliceTicketPageLoadParams>} LogObject<ciPoliceTicketPageLoadParams>\n */\nexport function ciPoliceTicketPageLoad(params: ciPoliceTicketPageLoadParams): LogObject<ciPoliceTicketPageLoadParams> {\n  return { evid: 3620, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceTicketProjectButtonAction' event (evid: 3627)\n *\n * Event description: Sent when a user clicks on one of the actions for a specific project in the CI Police Ticket page\n *\n * @param {ciPoliceTicketProjectButtonActionParams} params - The parameters for this event\n * @property {string} projectName - Name of the project we are looking at\n * @property {string} buttonAction - \"Go to source code\"/\"Go to CI Build\"/\"Show Rules in Development\"/\"Hide Rules in Development\"/\"Hide permanent opt outs\"/\"Show permanent opt outs\"/\"Learn more\"/\"Autofix\"\n * @property {string} sessionId - A unique session ID\n * @property {string} platform - \"dev-portal\"/\"station\"\n * @return {LogObject<ciPoliceTicketProjectButtonActionParams>} LogObject<ciPoliceTicketProjectButtonActionParams>\n */\nexport function ciPoliceTicketProjectButtonAction(params: ciPoliceTicketProjectButtonActionParams): LogObject<ciPoliceTicketProjectButtonActionParams> {\n  return { evid: 3627, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceTicketRuleButtonAction' event (evid: 3628)\n *\n * Event description: Sent when a user clicks on one of the actions for a specific rule in a project's CI Police Ticket page\n *\n * @param {ciPoliceTicketRuleButtonActionParams} params - The parameters for this event\n * @property {string} ruleName - The rule for which we are clicking the button\n * @property {string} projectName - Name of the project we are looking at\n * @property {string} buttonAction - \"Support Channel\"/\"Go to Rule Page\"/\"Emergency Opt Out\"/\"Go to rule docs\"/\"Regression\"/\"request opt out\"\n * @property {string} sessionId - A unique session ID\n * @property {string} platform - \"dev-portal\"/\"station\"\n * @return {LogObject<ciPoliceTicketRuleButtonActionParams>} LogObject<ciPoliceTicketRuleButtonActionParams>\n */\nexport function ciPoliceTicketRuleButtonAction(params: ciPoliceTicketRuleButtonActionParams): LogObject<ciPoliceTicketRuleButtonActionParams> {\n  return { evid: 3628, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'emergencyOptOutDialogAction' event (evid: 3629)\n *\n * Event description: Sent when a user clicks a CTA in the CI Police Ticket Emergency Opt Out dialog for a specific rule (for a specific project)\n *\n * @param {emergencyOptOutDialogActionParams} params - The parameters for this event\n * @property {string} projectName - Name of the project we are looking at\n * @property {string} buttonAction - \"Submit\"/\"Cancel\"/\"X button\"\n * @property {string} sessionId - A unique session ID\n * @property {string} platform - \"dev-portal\"/\"station\"/\"dev-portal-artifact-overview\"\n * @property {string} modal_name - the name of the modal (7th consecutive or regular)\n * @return {LogObject<emergencyOptOutDialogActionParams>} LogObject<emergencyOptOutDialogActionParams>\n */\nexport function emergencyOptOutDialogAction(params: emergencyOptOutDialogActionParams): LogObject<emergencyOptOutDialogActionParams> {\n  return { evid: 3629, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceMsTrackerOptOutDialog' event (evid: 3630)\n *\n * Event description: Sent when a user uses the opt out dialog (user to request opt out, rule owner to approve requests)\n *\n * @param {ciPoliceMsTrackerOptOutDialogParams} params - The parameters for this event\n * @property {string} optOutReason - The reason for opting out (written by regular user or rule owner)\n * @property {string} buttonAction - submit/\"Cancel\"/\"X button\"\n * @property {string} applicationId - This id will help connect between a request and its approval (null when button action is not 'submit')\n * @property {string} actionType - The action type (approving side/ requesting side)\n * @property {string} companyName - Name of the company that requested to opt out (null if requested from rule page)\n * @property {string} origin - Indicates wether the user got to the dialog through the email or null if he originated through the regular milestone tracker flow\n * @property {DateTime} expireDate - the date the user requested to be opted out OR the date the rule owner approved (could also be never - will show as null)\n * @property {string} dialogId - An id used to connect to the event containing the rules and projects\n * @property {string} pageName - Will be 'ticket' if the request was made from ci police ticket, 'tracker' if made from milestone tracker or null if it's a approving side action\n * @property {string} platform - \"dev-portal\"/\"station\"\n * @property {string} userName - Name of the user that performed the action\n * @return {LogObject<ciPoliceMsTrackerOptOutDialogParams>} LogObject<ciPoliceMsTrackerOptOutDialogParams>\n */\nexport function ciPoliceMsTrackerOptOutDialog(params: ciPoliceMsTrackerOptOutDialogParams): LogObject<ciPoliceMsTrackerOptOutDialogParams> {\n  return { evid: 3630, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceMsTrackerOptOutDialogRulesAndProjects' event (evid: 3631)\n *\n * Event description: Sent every time a request is made to commit to a new deadline or every time it's approved/denied. The event contains all the combinations of rules and projects per request (meaning per dialog id).\n *\n * @param {ciPoliceMsTrackerOptOutDialogRulesAndProjectsParams} params - The parameters for this event\n * @property {string} ruleName - The rule name that requested a new deadline\n * @property {string} projectName - The project name that requested a new deadline\n * @property {string} dialogid - An id used to connect to the event of opt out dialog\n * @return {LogObject<ciPoliceMsTrackerOptOutDialogRulesAndProjectsParams>} LogObject<ciPoliceMsTrackerOptOutDialogRulesAndProjectsParams>\n */\nexport function ciPoliceMsTrackerOptOutDialogRulesAndProjects(params: ciPoliceMsTrackerOptOutDialogRulesAndProjectsParams): LogObject<ciPoliceMsTrackerOptOutDialogRulesAndProjectsParams> {\n  return { evid: 3631, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'ciPoliceMsTrackerButtonAction' event (evid: 3632)\n *\n * Event description: Sent for every button action that isn't sent through Cairo generic events.\n *\n * @param {ciPoliceMsTrackerButtonActionParams} params - The parameters for this event\n * @property {string} product - The product were at 'rule-view' 'company-view'\n * @property {string} buttonClicked - The button that was clicked currently 'repository link' /'copy link to share' /'export' 'documentation'/'configurations'/ click on rule owners email\n * @return {LogObject<ciPoliceMsTrackerButtonActionParams>} LogObject<ciPoliceMsTrackerButtonActionParams>\n */\nexport function ciPoliceMsTrackerButtonAction(params: ciPoliceMsTrackerButtonActionParams): LogObject<ciPoliceMsTrackerButtonActionParams> {\n  return { evid: 3632, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633' event (evid: 3633)\n *\n * Event description: Sent when a user clicks on \"emergency opt out\" CTA in Wix Standards\n *\n * @param {wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633Params} params - The parameters for this event\n * @property {string} projectName - Name of the project we are looking at\n * @property {string} sessionId - A unique session ID\n * @property {string} platform - \"dev-portal\"/\"station\"/\"dev-portal-artifact-overview\"\n * @property {string} modal_name - the name of the modal (7th consecutive or regular)\n * @return {LogObject<wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633Params>} LogObject<wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633Params>\n */\nexport function wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633(params: wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633Params): LogObject<wixStandardsTicketEmergencyOptOutDialogOpenSrc11Evid3633Params> {\n  return { evid: 3633, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'lokiRepoUpdateCreated' event (evid: 3710)\n *\n * Event description: Sent when a source repo has a new update for a target repo\n *\n * @param {lokiRepoUpdateCreatedParams} params - The parameters for this event\n * @property {string} targetBranch - Should be 'loki-updates' for fallback otherwise 'master'\n * @property {string} guid - Unique ID of request: source repo, source sha, target repo\n * @property {string} schedule_type - the scheduling plan for this update (currently asap/every_3_hours/once_a_day)\n * @property {string} sourceSha - Source sha (commit) of the update\n * @property {string} correlationId - contains the relevant yolo guid of initial update  or null if its a yolo update or old loki update\n * @property {string} sourceRepo - The repo that has one or more packages that committed new data\n * @property {string} targetRepo - Which repo needs to be updated with new data\n * @return {LogObject<lokiRepoUpdateCreatedParams>} LogObject<lokiRepoUpdateCreatedParams>\n */\nexport function lokiRepoUpdateCreated(params: lokiRepoUpdateCreatedParams): LogObject<lokiRepoUpdateCreatedParams> {\n  return { evid: 3710, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'lokiUpdatePrOpened' event (evid: 3712)\n *\n * Event description: Sent when a PR is created/updated for updating the source repo in the target repo - sent for each try number\n *\n * @param {lokiUpdatePrOpenedParams} params - The parameters for this event\n * @property {number} tryNumber - 1 if first try; >1 otherwise\n * @property {string} guid - Unique ID of request: source repo, source sha, target repo\n * @property {string} sourceSha - Source sha (commit) of the update\n * @property {string} correlationId - contains the relevant yolo guid of initial update  or null if its a yolo update or old loki update\n * @property {string} sourceRepo - The repo that has one or more packages that committed new data\n * @property {string} targetRepo - Which repo needs to be updated with new data\n * @property {boolean} isLastAutomaticRetry - TRUE if this is the last automatic retry (for current implementation, tryNumber should be = 3); FALSE otherwise\n * @property {boolean} isManualRetry - TRUE if user triggered the retry (for current implementation, tryNumber should be > 3); FALSE if it's  an automatic retry\n * @return {LogObject<lokiUpdatePrOpenedParams>} LogObject<lokiUpdatePrOpenedParams>\n */\nexport function lokiUpdatePrOpened(params: lokiUpdatePrOpenedParams): LogObject<lokiUpdatePrOpenedParams> {\n  return { evid: 3712, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'lokiUpdatePrResult' event (evid: 3713)\n *\n * Event description: Sent when an update PR is done trying to update the source repo in the target repo - sent for each try number\n *\n * @param {lokiUpdatePrResultParams} params - The parameters for this event\n * @property {number} tryNumber - 1 if first try; > 1 otherwise\n * @property {string} updateResult - \"passed\"/\"failed\"\n * @property {string} guid - Unique ID of request: source repo, source sha, target repo\n * @property {string} prURL - Pull Request URL\n * @property {string} sourceSha - Source sha (commit) of the update\n * @property {string} correlationId - contains the relevant yolo guid of initial update  or null if its a yolo update or old loki update\n * @property {string} sourceRepo - The repo that has one or more packages that committed new data\n * @property {string} targetRepo - Which repo needs to be updated with new data\n * @property {boolean} isLastAutomaticRetry - TRUE if this is the last automatic retry (for current implementation, tryNumber should be = 3); FALSE otherwise\n * @property {boolean} isManualRetry - TRUE if user triggered the retry (for current implementation, tryNumber should be > 3); FALSE if it's an automatic retry\n * @return {LogObject<lokiUpdatePrResultParams>} LogObject<lokiUpdatePrResultParams>\n */\nexport function lokiUpdatePrResult(params: lokiUpdatePrResultParams): LogObject<lokiUpdatePrResultParams> {\n  return { evid: 3713, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'lokiUpdateMerged' event (evid: 3714)\n *\n * Event description: Sent when an update PR is done, trying to update the source repo in the target repo; should only be sent if we have a 3713 event for the same guid with updateResult = \"passed\"\n *\n * @param {lokiUpdateMergedParams} params - The parameters for this event\n * @property {string} targetBranch - Should be 'loki-updates' for fallback otherwise 'master'\n * @property {number} tryNumber - 1 if first try; > 1 otherwise -- should be equal to the tryNumber for event 3713 with the same guid where updateResult = \"passed\"\n * @property {string} guid - Unique ID of request: source repo, source sha, target repo\n * @property {string} branch - Name of branch that was merged into master\n * @property {string} sourceSha - Source sha (commit) of the update\n * @property {string} correlationId - contains the relevant yolo guid of initial update  or null if its a yolo update or old loki update\n * @property {string} sourceRepo - The repo that has one ore more packages that committed new data\n * @property {string} targetRepo - Which repo needs to be updated with new data\n * @property {boolean} isLastAutomaticRetry - TRUE if this is the last automatic retry (for current implementation, tryNumber should be = 3); FALSE otherwise\n * @property {boolean} isManualRetry - TRUE if user triggered the retry (for current implementation, tryNumber should be > 3); FALSE if it's an automatic retry\n * @return {LogObject<lokiUpdateMergedParams>} LogObject<lokiUpdateMergedParams>\n */\nexport function lokiUpdateMerged(params: lokiUpdateMergedParams): LogObject<lokiUpdateMergedParams> {\n  return { evid: 3714, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'lokiUpdateSkipped' event (evid: 3715)\n *\n * Event description: Sent when a repo update is skipped midway through the process\n *\n * @param {lokiUpdateSkippedParams} params - The parameters for this event\n * @property {string} targetBranch - Should be 'loki-updates' for fallback otherwise 'master'\n * @property {number} tryNumber - 0 if skipped before trying to update at all; 1 if first try; >1 otherwise\n * @property {string} guid - Unique ID of request: source repo, source sha, target repo\n * @property {string} skipReason - \"Newer update available\"/...\n * @property {string} sourceSha - Source sha (commit) of the update\n * @property {string} correlationId - contains the relevant yolo guid of initial update or null if its a yolo update or old loki update\n * @property {string} sourceRepo - The repo that has one ore more packages that committed new data\n * @property {string} targetRepo - Which repo needs to be updated with new data\n * @return {LogObject<lokiUpdateSkippedParams>} LogObject<lokiUpdateSkippedParams>\n */\nexport function lokiUpdateSkipped(params: lokiUpdateSkippedParams): LogObject<lokiUpdateSkippedParams> {\n  return { evid: 3715, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'lokiScheduleChanged' event (evid: 3716)\n *\n * Event description: sent when a user changes the scheduling time\n *\n * @param {lokiScheduleChangedParams} params - The parameters for this event\n * @property {string} newSchedule - the new schedule the user choose to use (current options are asap/every_3_hours/once_a_day)\n * @property {string} oldSchedule - the schedule timing that was set before the change (current options are asap/every_3_hours/once_a_day)\n * @property {string} sourceRepo - The repo that has one ore more packages that committed new dataThe repo that has one ore more packages that committed new data\n * @property {string} targetRepo - Which repo needs to be updated with new data\n * @return {LogObject<lokiScheduleChangedParams>} LogObject<lokiScheduleChangedParams>\n */\nexport function lokiScheduleChanged(params: lokiScheduleChangedParams): LogObject<lokiScheduleChangedParams> {\n  return { evid: 3716, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'arkProjectOptedOut' event (evid: 4300)\n *\n * Event description: Sent when a project chooses to opt out of ARK\n *\n * @param {arkProjectOptedOutParams} params - The parameters for this event\n * @property {string} artifactId - The artifact that is being opted out\n * @property {string} optOutReason - Reason that project is opting out: \"from onboarding\", \"can't use ARK\"\n * @property {string} optOutDuration - For how long is the project opting out: \"2 weeks\", \"indefinitely\"\n * @property {string} userName - The user who asked to opt out\n * @return {LogObject<arkProjectOptedOutParams>} LogObject<arkProjectOptedOutParams>\n */\nexport function arkProjectOptedOut(params: arkProjectOptedOutParams): LogObject<arkProjectOptedOutParams> {\n  return { evid: 4300, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'arkProjectOptedIn' event (evid: 4301)\n *\n * Event description: Sent when a project chooses to opt in of ARK\n *\n * @param {arkProjectOptedInParams} params - The parameters for this event\n * @property {string} artifactId - The artifact that is being opted in\n * @property {string} userName - The user who asked to opt in, currently null\n * @return {LogObject<arkProjectOptedInParams>} LogObject<arkProjectOptedInParams>\n */\nexport function arkProjectOptedIn(params: arkProjectOptedInParams): LogObject<arkProjectOptedInParams> {\n  return { evid: 4301, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'autofixPrMerged' event (evid: 4601)\n *\n * Event description: Sent when the autofix pr is merged\n *\n * @param {autofixPrMergedParams} params - The parameters for this event\n * @property {string} projectName - Name of the project\n * @property {string} prURL - Link to Autofix PR\n * @property {string} ownershipTag - Name of ownership tag\n * @property {string} userName - Name of user that merged the PR to master\n * @property {string} fixedRules - An array of the PR fixed rules\n * @return {LogObject<autofixPrMergedParams>} LogObject<autofixPrMergedParams>\n */\nexport function autofixPrMerged(params: autofixPrMergedParams): LogObject<autofixPrMergedParams> {\n  return { evid: 4601, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliCliCommand' event (evid: 5200)\n *\n * Event description: Sent when a user enters a command (valid/invalid) in the Wix CLI\n *\n * @param {wixCliCliCommandParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} extraFileds - A Json of extra filed - for example - for dev & preview with embedded scripts - is_mocking_values\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {boolean} isValid - Is the entered command a valid CLI command\n * @property {string} nodeVersion - The Node (full) version\n * @property {string} flags - (Optional) Flags that were added to the command (e.g. \"-h\")\n * @property {string} cliVersion - The CLI version\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} command - The command that was entered by the user (e.g. \"wix dev\", \"preview-deployment\"). Note: This can be an invalid command.\n * @property {string} shellVersion - Which version of the shell is being used\n * @property {string} shellName - Which shell is being used\n * @property {string} flow - \"Sites\"/\"Apps\"\n * @property {string} terminalVersion - Which version of the terminal is being used\n * @property {number} siteRevision - (Optional) Site revision, if available\n * @property {string} osName - Which OS is being used\n * @property {string} terminalName - Which terminal is being used\n * @property {string} osVersion - Which version of the OS is being used\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {string} arguments - The arguments/params that are added to the command (comma separated list)\n * @return {LogObject<wixCliCliCommandParams>} LogObject<wixCliCliCommandParams>\n */\nexport function wixCliCliCommand(params: wixCliCliCommandParams): LogObject<wixCliCliCommandParams> {\n  return { evid: 5200, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliCliCommandStatus' event (evid: 5201)\n *\n * Event description: Sent after a user enters a command in the Wix CLI\n *\n * @param {wixCliCliCommandStatusParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} extraFileds - A Json with extra data - for example - for build command - build statistics\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {number} duration - The time it took for the command to run (in ms)\n * @property {boolean} isValid - Is the entered command a valid CLI command\n * @property {string} errorMessage - (Optional) The error message displayed, if the command was invalid\n * @property {string} nodeVersion - The Node (full) version\n * @property {string} flags - (Optional) Flags that were added to the command (e.g. \"-h\")\n * @property {string} cliVersion - The CLI version\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} command - The command that was entered by the user (e.g. \"wix dev\", \"preview-deployment\"). Note: This can be an invalid command.\n * @property {boolean} isSuccess - Was the command successful\n * @property {string} extensions - Jsom of extensions type & number of each extensions: {side_bar_category:3,dashboard_page:4...}\n * @property {string} errorType - (Optional) The error type, if the command was invalid - User/ System error\n * @property {string} shellVersion - Which version of the shell is being used\n * @property {string} shellName - Which shell is being used\n * @property {string} flow - \"Sites\"/\"Apps\"\n * @property {string} terminalVersion - Which version of the terminal is being used\n * @property {number} siteRevision - (Optional) Site revision, if available\n * @property {string} failedStep - (Optional) If the generation was unsuccessful, which step failed\n * @property {string} osName - Which OS is being used\n * @property {string} errorName - The error name - a generic name for a group off errors. (Optional) if the command was invalid\n * @property {string} suggestion - (Optional) Which suggestion was shown to the user, if any\n * @property {string} terminalName - Which terminal is being used\n * @property {string} osVersion - Which version of the OS is being used\n * @property {string} previewUrl - The preview url that the user gets from us, can be null (will be sent only for preview command)\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {string} arguments - The arguments/params that are added to the command (comma separated list)\n * @property {number} customKeys - In Headless project - counting the number of custom keys entered by the user, using wix-env command\n * @return {LogObject<wixCliCliCommandStatusParams>} LogObject<wixCliCliCommandStatusParams>\n */\nexport function wixCliCliCommandStatus(params: wixCliCliCommandStatusParams): LogObject<wixCliCliCommandStatusParams> {\n  return { evid: 5201, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliFileFolderCreatedRenamedDeleted' event (evid: 5202)\n *\n * Event description: Sent when a user creates, renames or deletes a file/folder in the local flow using Wix CLI\n *\n * @param {wixCliFileFolderCreatedRenamedDeletedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} path - Full path of the file/folder after its creation/rename (e.g. \"backend/media-control.jsw\"), or name of the file that has been deleted\n * @property {string} nodeVersion - The Node (full) version\n * @property {string} cliVersion - The CLI version\n * @property {string} oldPath - (Optional) Previous full path of the file/folder, in case action = \"Rename\"\n * @property {string} sectionName - Section name (\"public\"/\"backend\"/\"other\")\n * @property {string} shellVersion - Which version of the shell is being used\n * @property {string} shellName - Which shell is being used\n * @property {string} flow - \"Sites\"/\"Apps\"\n * @property {string} terminalVersion - Which version of the terminal is being used\n * @property {number} siteRevision - (Optional) Site revision\n * @property {string} osName - Which OS is being used\n * @property {string} terminalName - Which terminal is being used\n * @property {string} type - Type of the created object: \"folder\"/file extension\n * @property {string} osVersion - Which version of the OS is being used\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {string} action - \"Create\" / \"Rename\" / \"Delete\"\n * @return {LogObject<wixCliFileFolderCreatedRenamedDeletedParams>} LogObject<wixCliFileFolderCreatedRenamedDeletedParams>\n */\nexport function wixCliFileFolderCreatedRenamedDeleted(params: wixCliFileFolderCreatedRenamedDeletedParams): LogObject<wixCliFileFolderCreatedRenamedDeletedParams> {\n  return { evid: 5202, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliCodeHasBeenChanged' event (evid: 5203)\n *\n * Event description: Sent when the user changes their code while Wix CLI is running (per local save)\n *\n * @param {wixCliCodeHasBeenChangedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} nodeVersion - Which Node (full) version is being used\n * @property {string} cliVersion - The CLI version\n * @property {string} fileName - Full path of file (e.g. \"public/pages/lkrir.js\")\n * @property {string} shellVersion - Which version of the shell is being used\n * @property {string} shellName - Which shell is being used\n * @property {string} flow - \"Sites\"/\"Apps\"\n * @property {string} terminalVersion - Which version of the terminal is being used\n * @property {number} siteRevision - Site revision\n * @property {string} osName - Which OS is being used\n * @property {string} terminalName - Which terminal is being used\n * @property {string} osVersion - Which version of the OS is being used\n * @property {GUID} cliSessionID - A unique ID for each Wix dev session\n * @return {LogObject<wixCliCodeHasBeenChangedParams>} LogObject<wixCliCodeHasBeenChangedParams>\n */\nexport function wixCliCodeHasBeenChanged(params: wixCliCodeHasBeenChangedParams): LogObject<wixCliCodeHasBeenChangedParams> {\n  return { evid: 5203, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliCliMessageDisplayed' event (evid: 5204)\n *\n * Event description: Sent when the Wix CLI presents a message to the user (e.g. after the editor disconnects)\n *\n * @param {wixCliCliMessageDisplayedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} nodeVersion - Which Node (full) version is being used\n * @property {string} cliVersion - The CLI version\n * @property {string} shellVersion - Which version of the shell is being used\n * @property {string} shellName - Which shell is being used\n * @property {string} flow - \"Sites\"/\"Apps\"\n * @property {string} terminalVersion - Which version of the terminal is being used\n * @property {number} siteRevision - (Optional) Site revision, if available\n * @property {GUID} messageId - A unique ID for each message displayed\n * @property {string} osName - Which OS is being used\n * @property {string} message - The message that the CLI displays to the user\n * @property {string} terminalName - Which terminal is being used\n * @property {string} osVersion - Which version of the OS is being used\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliCliMessageDisplayedParams>} LogObject<wixCliCliMessageDisplayedParams>\n */\nexport function wixCliCliMessageDisplayed(params: wixCliCliMessageDisplayedParams): LogObject<wixCliCliMessageDisplayedParams> {\n  return { evid: 5204, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliUserResponseToCliMessage' event (evid: 5205)\n *\n * Event description: Sent when the user responds to a message presented by the CLI\n *\n * @param {wixCliUserResponseToCliMessageParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} nodeVersion - The Node (full) version\n * @property {string} cliVersion - The CLI version\n * @property {string} shellVersion - The shell version\n * @property {string} shellName - The shell that is being used\n * @property {string} flow - \"Sites\"/\"Apps\"\n * @property {string} terminalVersion - The terminal version\n * @property {number} siteRevision - (Optional) Site revision, if available\n * @property {GUID} messageId - A unique ID for each message displayed\n * @property {string} osName - The OS that is being used\n * @property {string} message - The message that the CLI displays to the user\n * @property {string} terminalName - The terminal that is being used\n * @property {string} osVersion - The version of the OS that is being used\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {string} action - The action performed by the user\n * @return {LogObject<wixCliUserResponseToCliMessageParams>} LogObject<wixCliUserResponseToCliMessageParams>\n */\nexport function wixCliUserResponseToCliMessage(params: wixCliUserResponseToCliMessageParams): LogObject<wixCliUserResponseToCliMessageParams> {\n  return { evid: 5205, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliReadyForReloadAfterCodeChange' event (evid: 5206)\n *\n * Event description: Sent when Wix CLI is ready to reload the page after it has detected the user has changed code in the project\n *\n * @param {wixCliReadyForReloadAfterCodeChangeParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {number} duration - Time it took for Wix CLI to be ready to load the page after the code change (in ms)\n * @property {string} nodeVersion - The Node (full) version\n * @property {string} cliVersion - The CLI version\n * @property {string} fileName - Full path of file (e.g. \"public/pages/lkrir.js\")\n * @property {string} shellVersion - The shell version\n * @property {string} shellName - Which shell is being used\n * @property {string} flow - \"Sites\"/\"Apps\"\n * @property {string} terminalVersion - The terminal version\n * @property {number} siteRevision - Site revision\n * @property {string} osName - Which OS is being used\n * @property {string} terminalName - Which terminal is being used\n * @property {string} osVersion - The OS version\n * @property {GUID} cliSessionID - A unique ID for each Wix dev session\n * @return {LogObject<wixCliReadyForReloadAfterCodeChangeParams>} LogObject<wixCliReadyForReloadAfterCodeChangeParams>\n */\nexport function wixCliReadyForReloadAfterCodeChange(params: wixCliReadyForReloadAfterCodeChangeParams): LogObject<wixCliReadyForReloadAfterCodeChangeParams> {\n  return { evid: 5206, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowFileUploadStarted' event (evid: 5208)\n *\n * Event description: Sent when the hosting service starts uploading files required by an app\n *\n * @param {wixCliAppFlowFileUploadStartedParams} params - The parameters for this event\n * @property {number} numFiles - How many files are uploaded\n * @property {string} projectId - The project that the users is currently working on\n * @property {number} fileSizeNotCompressed - The total size of the uploaded files\n * @property {string} hostingProvider - The hosting provider (\"Wix\"/...)\n * @property {number} timestampMs - The event's start time\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {number} fileSizeCompressed - The total size of the uploaded files, compressed\n * @property {string} cliVersion - The CLI version\n * @property {number} totalSizeKb - Use this field from cli version 1.1.41, until then use file_size_not_compressed\n * @return {LogObject<wixCliAppFlowFileUploadStartedParams>} LogObject<wixCliAppFlowFileUploadStartedParams>\n */\nexport function wixCliAppFlowFileUploadStarted(params: wixCliAppFlowFileUploadStartedParams): LogObject<wixCliAppFlowFileUploadStartedParams> {\n  return { evid: 5208, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowZipUploadDone' event (evid: 5209)\n *\n * Event description: Sent when the hosting service is done uploading the zip\n *\n * @param {wixCliAppFlowZipUploadDoneParams} params - The parameters for this event\n * @property {number} duration - How much time it took to to upload the zip (in ms)\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowZipUploadDoneParams>} LogObject<wixCliAppFlowZipUploadDoneParams>\n */\nexport function wixCliAppFlowZipUploadDone(params: wixCliAppFlowZipUploadDoneParams): LogObject<wixCliAppFlowZipUploadDoneParams> {\n  return { evid: 5209, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowUploadEnded' event (evid: 5210)\n *\n * Event description: Sent when the hosting service is done with the entire upload of the files\n *\n * @param {wixCliAppFlowUploadEndedParams} params - The parameters for this event\n * @property {number} duration - How much time it took for the entire upload (in ms)\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {string} cliVersion - The cli version\n * @return {LogObject<wixCliAppFlowUploadEndedParams>} LogObject<wixCliAppFlowUploadEndedParams>\n */\nexport function wixCliAppFlowUploadEnded(params: wixCliAppFlowUploadEndedParams): LogObject<wixCliAppFlowUploadEndedParams> {\n  return { evid: 5210, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliLoginStart' event (evid: 5211)\n *\n * Event description: Sent when the Wix CLI authentication flow starts\n *\n * @param {wixCliLoginStartParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {boolean} wasLoggedIn - Was the user logged in before; i.e. did the user log out before starting the login process\n * @property {number} try - Which login is this - if 0, first try; if > 0, then this is a retry\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliLoginStartParams>} LogObject<wixCliLoginStartParams>\n */\nexport function wixCliLoginStart(params: wixCliLoginStartParams): LogObject<wixCliLoginStartParams> {\n  return { evid: 5211, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliLoginEnd' event (evid: 5212)\n *\n * Event description: Sent when the Wix CLI authentication flow ends\n *\n * @param {wixCliLoginEndParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {number} try - Which login is this - if 0, first try; if > 0, then this is a retry\n * @property {string} errorMessage - (Optional) The error message displayed, if the login was unsuccessul\n * @property {boolean} isSuccess - Was the login successful\n * @property {string} errorType - (Optional) The error type, if the login was unsuccessful\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliLoginEndParams>} LogObject<wixCliLoginEndParams>\n */\nexport function wixCliLoginEnd(params: wixCliLoginEndParams): LogObject<wixCliLoginEndParams> {\n  return { evid: 5212, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowAppGenerationTypeOfCreationSelected' event (evid: 5213)\n *\n * Event description: Sent when the user selects whether they would like to create a new Wix app or extend an existing one\n *\n * @param {wixCliAppFlowAppGenerationTypeOfCreationSelectedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} type - What would the user like to create: a new Wix app, or add new extensions to an existing app\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowAppGenerationTypeOfCreationSelectedParams>} LogObject<wixCliAppFlowAppGenerationTypeOfCreationSelectedParams>\n */\nexport function wixCliAppFlowAppGenerationTypeOfCreationSelected(params: wixCliAppFlowAppGenerationTypeOfCreationSelectedParams): LogObject<wixCliAppFlowAppGenerationTypeOfCreationSelectedParams> {\n  return { evid: 5213, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowAppGenerationNewAppNameEntered' event (evid: 5214)\n *\n * Event description: Sent when the user enters the name of the new app they want to create\n *\n * @param {wixCliAppFlowAppGenerationNewAppNameEnteredParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} name - Name of the new Wix App the user wants to create\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowAppGenerationNewAppNameEnteredParams>} LogObject<wixCliAppFlowAppGenerationNewAppNameEnteredParams>\n */\nexport function wixCliAppFlowAppGenerationNewAppNameEntered(params: wixCliAppFlowAppGenerationNewAppNameEnteredParams): LogObject<wixCliAppFlowAppGenerationNewAppNameEnteredParams> {\n  return { evid: 5214, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowAppGenerationNewAppRegistrationEnd' event (evid: 5215)\n *\n * Event description: Sent when the new app registration ends (successfully or not)\n *\n * @param {wixCliAppFlowAppGenerationNewAppRegistrationEndParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} errorMessage - (Optional) If the registration was unsuccessful, the error message displayed to the user\n * @property {string} result - Was the app registration in the Dev Center successful or not\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} errorType - (Optional) If the registration was unsuccessful, the error type\n * @property {string} appId - ID of the newly created Wix App\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowAppGenerationNewAppRegistrationEndParams>} LogObject<wixCliAppFlowAppGenerationNewAppRegistrationEndParams>\n */\nexport function wixCliAppFlowAppGenerationNewAppRegistrationEnd(params: wixCliAppFlowAppGenerationNewAppRegistrationEndParams): LogObject<wixCliAppFlowAppGenerationNewAppRegistrationEndParams> {\n  return { evid: 5215, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowAppGenerationExistingAppSelected' event (evid: 5216)\n *\n * Event description: Sent when the user selects an existing app they want to extend\n *\n * @param {wixCliAppFlowAppGenerationExistingAppSelectedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} appName - Name of the existing Wix App the user wants to extend\n * @property {string} projectId - The project that the users is currently working on\n * @property {number} numApps - How many apps does the user have\n * @property {string} appId - ID of the existing Wix App the user wants to extend\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowAppGenerationExistingAppSelectedParams>} LogObject<wixCliAppFlowAppGenerationExistingAppSelectedParams>\n */\nexport function wixCliAppFlowAppGenerationExistingAppSelected(params: wixCliAppFlowAppGenerationExistingAppSelectedParams): LogObject<wixCliAppFlowAppGenerationExistingAppSelectedParams> {\n  return { evid: 5216, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowAppGenerationAppGenerationEnd' event (evid: 5217)\n *\n * Event description: Sent when the new app generation end (successfully or not)\n *\n * @param {wixCliAppFlowAppGenerationAppGenerationEndParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the command was entered\n * @property {string} errorMessage - (Optional) If the generation was unsuccessful, the error message displayed to the user\n * @property {string} result - Was the app folder generation successful or not\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} errorType - (Optional) If the generation was unsuccessful, the error type\n * @property {string} failedStep - (Optional) If the generation was unsuccessful, which step failed\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowAppGenerationAppGenerationEndParams>} LogObject<wixCliAppFlowAppGenerationAppGenerationEndParams>\n */\nexport function wixCliAppFlowAppGenerationAppGenerationEnd(params: wixCliAppFlowAppGenerationAppGenerationEndParams): LogObject<wixCliAppFlowAppGenerationAppGenerationEndParams> {\n  return { evid: 5217, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowComponentInstalledInTheApp' event (evid: 5218)\n *\n * Event description: Sent the components installed in the app when the app is published.\n *\n * @param {wixCliAppFlowComponentInstalledInTheAppParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} cliVersion - The CLI version\n * @property {string} appCurrentVersion - The app version\n * @property {string} componentId - The Component Id\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} widgetType - Relevant only for component type = widget. Pushed / Asked\n * @property {string} componentType - widget, page, sidebar category\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowComponentInstalledInTheAppParams>} LogObject<wixCliAppFlowComponentInstalledInTheAppParams>\n */\nexport function wixCliAppFlowComponentInstalledInTheApp(params: wixCliAppFlowComponentInstalledInTheAppParams): LogObject<wixCliAppFlowComponentInstalledInTheAppParams> {\n  return { evid: 5218, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteSiteSelectorOpened' event (evid: 5219)\n *\n * Event description: Sent when the sites selector is open\n *\n * @param {wixCliAppFlowDevelopmentSiteSiteSelectorOpenedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {number} devSitesLimit - How many development sites CAN the user have\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {string} origin - From where did the user get to the Development Site Selector\n * @property {number} devSitesCount - How many development sites does the user currently have\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowDevelopmentSiteSiteSelectorOpenedParams>} LogObject<wixCliAppFlowDevelopmentSiteSiteSelectorOpenedParams>\n */\nexport function wixCliAppFlowDevelopmentSiteSiteSelectorOpened(params: wixCliAppFlowDevelopmentSiteSiteSelectorOpenedParams): LogObject<wixCliAppFlowDevelopmentSiteSiteSelectorOpenedParams> {\n  return { evid: 5219, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelected' event (evid: 5220)\n *\n * Event description: Sent when a site was selected at the sites selector\n *\n * @param {wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelectedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {string} type - Would the user like to create a new development site or pick an existing one\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelectedParams>} LogObject<wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelectedParams>\n */\nexport function wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelected(params: wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelectedParams): LogObject<wixCliAppFlowDevelopmentSiteTypeOfDevelopmentSiteSelectedParams> {\n  return { evid: 5220, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStart' event (evid: 5221)\n *\n * Event description: Sent when a New Development Site Creation Starts\n *\n * @param {wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStartParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStartParams>} LogObject<wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStartParams>\n */\nexport function wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStart(params: wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStartParams): LogObject<wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationStartParams> {\n  return { evid: 5221, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEnd' event (evid: 5222)\n *\n * Event description: Sent when a New Development Site Creation Ends\n *\n * @param {wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEndParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} errorMessage - (Optional) If the site creation was unsuccessful, the error message displayed to the user\n * @property {string} result - Was the new site creation successful or not\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {string} errorType - (Optional) If the site creation was unsuccessful, the error type\n * @property {string} siteName - (Optional) Name of the newly created development site\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {GUID} msid - The site's ID\n * @property {string} siteUrl - (Optional) URL of the newly created development site\n * @return {LogObject<wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEndParams>} LogObject<wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEndParams>\n */\nexport function wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEnd(params: wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEndParams): LogObject<wixCliAppFlowDevelopmentSiteNewDevelopmentSiteCreationEndParams> {\n  return { evid: 5222, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteExistingSiteSelected' event (evid: 5223)\n *\n * Event description: Sent when an Existing site was selected\n *\n * @param {wixCliAppFlowDevelopmentSiteExistingSiteSelectedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {string} siteName - (Optional) Name of the newly created development site\n * @property {number} numSites - How many sites does the user have (>=1)\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {GUID} msid - The site's ID\n * @property {string} siteUrl - (Optional) URL of the newly created development site\n * @return {LogObject<wixCliAppFlowDevelopmentSiteExistingSiteSelectedParams>} LogObject<wixCliAppFlowDevelopmentSiteExistingSiteSelectedParams>\n */\nexport function wixCliAppFlowDevelopmentSiteExistingSiteSelected(params: wixCliAppFlowDevelopmentSiteExistingSiteSelectedParams): LogObject<wixCliAppFlowDevelopmentSiteExistingSiteSelectedParams> {\n  return { evid: 5223, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStart' event (evid: 5224)\n *\n * Event description: Sent when an App Installation on Development Site Starts\n *\n * @param {wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStartParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} appName - Name of the Wix App the user wants to install\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {GUID} appId - ID of the Wix App the user wants to install\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {GUID} msid - The site's ID\n * @return {LogObject<wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStartParams>} LogObject<wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStartParams>\n */\nexport function wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStart(params: wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStartParams): LogObject<wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteStartParams> {\n  return { evid: 5224, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEnd' event (evid: 5225)\n *\n * Event description: Sent when an App Installation on Development Site Ends\n *\n * @param {wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEndParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} errorMessage - (Optional) If the app installation on the site was unsuccessful, the error message displayed to the user\n * @property {string} result - Was the app successfully installed on the development site or not\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {string} errorType - (Optional) If the site installation on the site was unsuccessful, the error type\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {GUID} msid - The site's ID\n * @return {LogObject<wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEndParams>} LogObject<wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEndParams>\n */\nexport function wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEnd(params: wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEndParams): LogObject<wixCliAppFlowDevelopmentSiteAppInstallationOnDevelopmentSiteEndParams> {\n  return { evid: 5225, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteDevelopmentSiteSet' event (evid: 5226)\n *\n * Event description: Sent when a development site was set\n *\n * @param {wixCliAppFlowDevelopmentSiteDevelopmentSiteSetParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {GUID} msid - The site's ID\n * @return {LogObject<wixCliAppFlowDevelopmentSiteDevelopmentSiteSetParams>} LogObject<wixCliAppFlowDevelopmentSiteDevelopmentSiteSetParams>\n */\nexport function wixCliAppFlowDevelopmentSiteDevelopmentSiteSet(params: wixCliAppFlowDevelopmentSiteDevelopmentSiteSetParams): LogObject<wixCliAppFlowDevelopmentSiteDevelopmentSiteSetParams> {\n  return { evid: 5226, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowDevelopmentSiteSiteSelectorAborted' event (evid: 5227)\n *\n * Event description: Sent when there was a Site Selector Abort\n *\n * @param {wixCliAppFlowDevelopmentSiteSiteSelectorAbortedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} projectId - The project that the users is currently working on\n * @property {GUID} siteSelectorSessionId - A unique ID for each Site Selector session\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowDevelopmentSiteSiteSelectorAbortedParams>} LogObject<wixCliAppFlowDevelopmentSiteSiteSelectorAbortedParams>\n */\nexport function wixCliAppFlowDevelopmentSiteSiteSelectorAborted(params: wixCliAppFlowDevelopmentSiteSiteSelectorAbortedParams): LogObject<wixCliAppFlowDevelopmentSiteSiteSelectorAbortedParams> {\n  return { evid: 5227, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowExtensionGenerationExtensionWasAdded' event (evid: 5228)\n *\n * Event description: Sent the Extension generated in the app when the generate session is finished.\n *\n * @param {wixCliAppFlowExtensionGenerationExtensionWasAddedParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} failureReason - The failure reason, will be null if the extension was added successfully\n * @property {string} cliVersion - The CLI version\n * @property {string} appCurrentVersion - The app version\n * @property {string} componentId - The Component Id\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} widgetType - Relevant only for component type = widget. Pushed / Asked\n * @property {string} componentType - widget, page, sidebar category\n * @property {boolean} wasSuccess - True if the extension was added successfully\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliAppFlowExtensionGenerationExtensionWasAddedParams>} LogObject<wixCliAppFlowExtensionGenerationExtensionWasAddedParams>\n */\nexport function wixCliAppFlowExtensionGenerationExtensionWasAdded(params: wixCliAppFlowExtensionGenerationExtensionWasAddedParams): LogObject<wixCliAppFlowExtensionGenerationExtensionWasAddedParams> {\n  return { evid: 5228, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowStepsAnswers' event (evid: 5229)\n *\n * Event description: Sent on each answer the user writes, on each step of the flow.  (answers for CLI questions)\n *\n * @param {wixCliAppFlowStepsAnswersParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the component was published\n * @property {string} question - The question that the user is answering on\n * @property {string} cliVersion - The CLI version\n * @property {string} appCurrentVersion - The app version\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} command - The command that the user is working on now\n * @property {string} answer - The answer that the user wrote\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @property {string} flow - Apps / Sites\n * @property {string} arguments - Additional data - for example the template name\n * @property {string} additionalInfo - Any additional info needed in Json - {extensionType:”...”, extensionGroup:”...”, etc…}.\n * extensionType - dashboard page / side bar category / specific-ecomm-checkout-plugin / etc.. (relevant only for Existing app extension flow)\n * extensionGroup - Dashboard / site / backend\n * @property {string} questionKey - constant id for each question\n * @return {LogObject<wixCliAppFlowStepsAnswersParams>} LogObject<wixCliAppFlowStepsAnswersParams>\n */\nexport function wixCliAppFlowStepsAnswers(params: wixCliAppFlowStepsAnswersParams): LogObject<wixCliAppFlowStepsAnswersParams> {\n  return { evid: 5229, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliCliError' event (evid: 5230)\n *\n * Event description: Sent when there is a user/ system error at the CLI\n *\n * @param {wixCliCliErrorParams} params - The parameters for this event\n * @property {DateTime} localTime - The local time during which the error happened\n * @property {string} errorMessage - (Optional) The error message displayed, if the command was invalid\n * @property {string} projectId - The project id that the dev is currently working on\n * @property {string} errorType - (Optional) The error type, if the command was invalid - User/ System error\n * @property {string} errorName - The error name - a generic name for a group off errors. (Optional) if the command was invalid\n * @property {GUID} cliSessionId - A unique ID for each Wix dev session\n * @return {LogObject<wixCliCliErrorParams>} LogObject<wixCliCliErrorParams>\n */\nexport function wixCliCliError(params: wixCliCliErrorParams): LogObject<wixCliCliErrorParams> {\n  return { evid: 5230, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAction' event (evid: 5231)\n *\n * Event description: Sent on each key press the user presses on at the CLI flow. For example - Enter to install an app / esc.\n *\n * @param {wixCliActionParams} params - The parameters for this event\n * @property {DateTime} localTime - local_time\n * @property {string} question - The question that the user is answering on\n * @property {string} cliVersion - cli_version\n * @property {string} appCurrentVersion - app_current_version\n * @property {string} projectId - The project that the users is currently working on\n * @property {string} command - The command that the user is working on now\n * @property {string} action - The action that the user choose\n * @property {GUID} cliSessionId - cli_session_id\n * @property {string} key - The key that the user press on\n * @property {string} flow - Apps / Sites\n * @property {string} arguments - Additional data - for example the template name\n * @property {string} additionalInfo - Any additional info needed in Json - {extensionType:”...”, extensionGroup:”...”, etc…}.\n * extensionType - dashboard page / side bar category / specific-ecomm-checkout-plugin / etc.. (relevant only for Existing app extension flow)\n * extensionGroup - Dashboard / site / backend\n * @property {string} questionKey - constant id for each question\n * @return {LogObject<wixCliActionParams>} LogObject<wixCliActionParams>\n */\nexport function wixCliAction(params: wixCliActionParams): LogObject<wixCliActionParams> {\n  return { evid: 5231, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppsFlowDeploymentStatusSrc11Evid5232' event (evid: 5232)\n *\n * Event description: The event will be sent when a deployment is finished (from appCloud/Cloudflare).\n *\n *\n * @param {wixCliAppsFlowDeploymentStatusSrc11Evid5232Params} params - The parameters for this event\n * @property {string} filesDetails -  [{file type: Number_files, file type: Number_files, etc..}]\n * @property {boolean} isSuccess - True if the deployment finished successfully\n * @property {string} failureReason - The failure reason, can be null\n * @property {string} uploadSource - appCloud / Cloudflare\n * @property {GUID} appId - the app id\n * @property {string} deploymentId - deploymentId\n * @property {GUID} cliSessionId - the cli session id\n * @property {number} filesSize - Total size of all files in the deployment - kb\n * @property {number} filesUploadTime - the filesUploadTime in ms\n * @return {LogObject<wixCliAppsFlowDeploymentStatusSrc11Evid5232Params>} LogObject<wixCliAppsFlowDeploymentStatusSrc11Evid5232Params>\n */\nexport function wixCliAppsFlowDeploymentStatusSrc11Evid5232(params: wixCliAppsFlowDeploymentStatusSrc11Evid5232Params): LogObject<wixCliAppsFlowDeploymentStatusSrc11Evid5232Params> {\n  return { evid: 5232, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppsFlowTunnelCreationStatusSrc11Evid5233' event (evid: 5233)\n *\n * Event description: The event will be sent when the dev command is in action - when the tunnel is being connected so the user will have a connection between Wix to his local server.\n *\n *\n *\n * @param {wixCliAppsFlowTunnelCreationStatusSrc11Evid5233Params} params - The parameters for this event\n * @property {boolean} isSuccess - True if the deployment finished successfully\n * @property {string} failureReason - The failure reason, can be null\n * @property {GUID} cliSessionId - the cli session id\n * @property {GUID} appId - the app id\n * @property {number} tunnelCreationTime - in ms\n * @return {LogObject<wixCliAppsFlowTunnelCreationStatusSrc11Evid5233Params>} LogObject<wixCliAppsFlowTunnelCreationStatusSrc11Evid5233Params>\n */\nexport function wixCliAppsFlowTunnelCreationStatusSrc11Evid5233(params: wixCliAppsFlowTunnelCreationStatusSrc11Evid5233Params): LogObject<wixCliAppsFlowTunnelCreationStatusSrc11Evid5233Params> {\n  return { evid: 5233, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppsFlowDeploymentRequestSrc11Evid5234' event (evid: 5234)\n *\n * Event description: The event will be sent when there is a deployment request - a friend opened the url I sent him / UoU using the app.\n *\n * @param {wixCliAppsFlowDeploymentRequestSrc11Evid5234Params} params - The parameters for this event\n * @property {string} appId - The id of the app that the deployment request was for\n * @property {string} deploymentId - deploymentId\n * @return {LogObject<wixCliAppsFlowDeploymentRequestSrc11Evid5234Params>} LogObject<wixCliAppsFlowDeploymentRequestSrc11Evid5234Params>\n */\nexport function wixCliAppsFlowDeploymentRequestSrc11Evid5234(params: wixCliAppsFlowDeploymentRequestSrc11Evid5234Params): LogObject<wixCliAppsFlowDeploymentRequestSrc11Evid5234Params> {\n  return { evid: 5234, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'wixCliAppFlowAppCloudServerUploadedSrc11Evid5235' event (evid: 5235)\n *\n * Event description: The event will be sent when a server uploaded is finished - successfully / not.\n *\n * @param {wixCliAppFlowAppCloudServerUploadedSrc11Evid5235Params} params - The parameters for this event\n * @property {string} deploymentId - The deployment id\n * @property {boolean} wasSuccess - True if the upload succeeded\n * @property {string} location - S3 or MediaPlatform\n * @property {string} uploadUrl - The url that was uploaded - created for s3\n * @property {string} appId - The app id\n * @property {string} fields - Uploaded destination details\n * @property {string} serveUrl - the serveUrl - created for wix servers\n * @property {string} uploadStatus - The uploaded start/end\n * @property {string} fileUrl - The file url\n * @property {DateTime} localTime - the local time when the uploaded started / ended\n * @return {LogObject<wixCliAppFlowAppCloudServerUploadedSrc11Evid5235Params>} LogObject<wixCliAppFlowAppCloudServerUploadedSrc11Evid5235Params>\n */\nexport function wixCliAppFlowAppCloudServerUploadedSrc11Evid5235(params: wixCliAppFlowAppCloudServerUploadedSrc11Evid5235Params): LogObject<wixCliAppFlowAppCloudServerUploadedSrc11Evid5235Params> {\n  return { evid: 5235, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'arkSlackAlertSent' event (evid: 5500)\n *\n * Event description: Reports each time Ark detects an issue with the gradual rollout process and sends an alert to the relevant Slack channel\n *\n * @param {arkSlackAlertSentParams} params - The parameters for this event\n * @property {string} artifactId - The artifact that is being rolled out\n * @property {string} step - On which step was the rollout before being stopped\n * @property {number} alertTimeout - How much time (in ms) is the alert supposed to be displayed before the rollout is automatically stopped\n * @property {string} exposure - To how many users was the rollout exposed before being stopped\n * @property {string} version - Which version is being rolled out\n * @property {number} numAlerts - How many alerts were detected by Ark\n * @property {string} messageId - A unique ID per alert\n * @property {string} rolloutId - A unique ID per rollout\n * @property {string} mode - \"Auto\"/\"Manual\"\n * @property {number} timestampMs - The event's creation time\n * @property {string} slackChannel - To which slack channel is the alert sent\n * @property {string} artifactType - The artifact type (FULLSTACK/SERVER/STATIC)\n * @return {LogObject<arkSlackAlertSentParams>} LogObject<arkSlackAlertSentParams>\n */\nexport function arkSlackAlertSent(params: arkSlackAlertSentParams): LogObject<arkSlackAlertSentParams> {\n  return { evid: 5500, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'sledMergeQueueManualClickSrc11Evid90599' event (evid: 90599)\n *\n * Event description: Sent when the user click manually on merge queue\n *\n * @param {sledMergeQueueManualClickSrc11Evid90599Params} params - The parameters for this event\n * @property {string} pullRequestId - The pr id\n * @property {string} sledRunId - The sled run id (to know the sled run result)\n * @property {string} repoName - The repo name\n * @return {LogObject<sledMergeQueueManualClickSrc11Evid90599Params>} LogObject<sledMergeQueueManualClickSrc11Evid90599Params>\n */\nexport function sledMergeQueueManualClickSrc11Evid90599(params: sledMergeQueueManualClickSrc11Evid90599Params): LogObject<sledMergeQueueManualClickSrc11Evid90599Params> {\n  return { evid: 90599, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'sledMergeQueueRunSrc11Evid90600' event (evid: 90600)\n *\n * Event description: Sent when sled pr run starts and ends, when the run starts by merge queue\n *\n * @param {sledMergeQueueRunSrc11Evid90600Params} params - The parameters for this event\n * @property {string} sledRunId - The sled run id\n * @property {string} pullRequestId - The PR id\n * @property {string} allPrs - String of all the prs in the queue with the pr that the event is sent for: [{pr: MergeQueueEntryState, Position,SledRunId?},{ pr: MergeQueueEntryState,Position, SledRunId?} ..]\n * @property {number} position - The position of the pr in the queue (0,1,2,3..)\n * @property {string} mergeQueueEntryState - queued / waiting / blocked/ etc..\n * @property {string} sledPhase - Start / End\n * @property {string} repoName - The repo name\n * @property {string} fullBuildCountInPr - sled_build_count_in_pr\n * @property {string} buildId - buildId\n * @property {string} fingerprint - fingerprint\n * @return {LogObject<sledMergeQueueRunSrc11Evid90600Params>} LogObject<sledMergeQueueRunSrc11Evid90600Params>\n */\nexport function sledMergeQueueRunSrc11Evid90600(params: sledMergeQueueRunSrc11Evid90600Params): LogObject<sledMergeQueueRunSrc11Evid90600Params> {\n  return { evid: 90600, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferRunStart' event (evid: 91200)\n *\n * Event description: Sent once Perfer starts a new run. \n * Perfer is an automatic tool for measuring performance on a build level before it gets to production\n *\n * @param {perferRunStartParams} params - The parameters for this event\n * @property {string} package - package path\n * @property {DateTime} timestamp - timestamp of when the run started\n * @property {string} commit - commit hash\n * @property {string} branch - branch name\n * @property {GUID} run_id - run id\n * @property {string} repo - repository uri\n * @return {LogObject<perferRunStartParams>} LogObject<perferRunStartParams>\n */\nexport function perferRunStart(params: perferRunStartParams): LogObject<perferRunStartParams> {\n  return { evid: 91200, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferRunFinished' event (evid: 91201)\n *\n * Event description: Sent once Perfer run finished. \n * Perfer is an automatic tool for measuring performance on a build level before it gets to production.\n *\n * @param {perferRunFinishedParams} params - The parameters for this event\n * @property {number} test_case_fail_count - number of test cases failed on this run\n * @property {number} test_case_count - number of test cases ran on this run\n * @property {string} additional_info - free text for additional info\n * @property {GUID} run_id - run id\n * @property {string} run_result - success / fail / error (success if the run passed, fail if there is a performance issue and the run failed, error if the run didn't complete)\n * @return {LogObject<perferRunFinishedParams>} LogObject<perferRunFinishedParams>\n */\nexport function perferRunFinished(params: perferRunFinishedParams): LogObject<perferRunFinishedParams> {\n  return { evid: 91201, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferTestCaseResult' event (evid: 91202)\n *\n * Event description: Sent for each Perfer test case. \n * Perfer is an automatic tool for measuring performance on a build level before it gets to production.\n *\n * @param {perferTestCaseResultParams} params - The parameters for this event\n * @property {string} test_case_type - loading time / file size\n * @property {number} expected - expected result for this test case\n * @property {string} test_case_result - success / fail\n * @property {GUID} run_id - run id\n * @property {string} scenario_type - which version of the artifact we’re testing. E.g product page w/ or w/o button\n * @property {string} test_case_mark_type - e.g. beat 33\n * @property {number} actual - actual result measured on this test case\n * @return {LogObject<perferTestCaseResultParams>} LogObject<perferTestCaseResultParams>\n */\nexport function perferTestCaseResult(params: perferTestCaseResultParams): LogObject<perferTestCaseResultParams> {\n  return { evid: 91202, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferRunResult' event (evid: 91204)\n *\n * Event description: Sent when a full Perfer run has ended -- this event is sent multiple times per perferRunId, as we don't really know when the run is over, there can only be retries. In order to get the latest result, we will look at the most current data per perferRunId.\n *\n * @param {perferRunResultParams} params - The parameters for this event\n * @property {string} artifactId - For which artifact did Perfer run\n * @property {string} fingerprint - The build’s unique fingerprint\n * @property {number} numRules - How many rules/violations were tested in this run\n * @property {string} perferReqId - A changing ID - there can be several such IDs per perferRunId. We use the newest one in order to know which metrics to take into consideration when calculating the success rate.\n * @property {string} result - “Passed”/”Failed”\n * @property {string} branch - Which branch is used\n * @property {string} perferRunId - Unique ID of Perfer request\n * @property {number} numRulesFailed - How many non Beta rules failed/violations were found in this run\n * @property {number} numBetaRulesFailed - How many Beta rules failed/violations were found in this run -- this number doesn't affect the result\n * @return {LogObject<perferRunResultParams>} LogObject<perferRunResultParams>\n */\nexport function perferRunResult(params: perferRunResultParams): LogObject<perferRunResultParams> {\n  return { evid: 91204, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferMetricResult' event (evid: 91205)\n *\n * Event description: Sent when Perfer reports the result of a specific limit test in a benchmark\n *\n * @param {perferMetricResultParams} params - The parameters for this event\n * @property {string} thresholdType - “absolute”/”relative”\n * @property {string} metricUnit - Metric unit (eg: \"seconds\"/\"kb\")\n * @property {string} ruleOwner - “Wix”/”user”\n * @property {string} metricType - “mark”/”measure”/”customMetric”\n * @property {string} perferReqId - A changing ID - there can be several such IDs per perferRunId. We use the newest one in order to know which metrics to take into consideration when calculating the success rate.\n * @property {string} result - “Passed”/”Failed”\n * @property {string} maxAllowedDegradation - Maximum allowed change in value for benchmark (in percentage) - relevant for relative\n * @property {boolean} isBetaRule - Is this a Beta rule or not (Beta rule: We ignore its result when calculating the entire run result)\n * @property {string} metricName - Example: “full app render”/”react render”/”requestCountJs”\n * @property {string} fileName - For which file is this benchmark written\n * @property {string} perferRunId - Unique ID of Perfer request\n * @property {string} benchmarkName - Example: “my benchmark”\n * @property {string} comparisonObject - “lt”/”lte”/”gt”/”gte” - only if metricType = “customMetric” and developer explicitly set it\n * @property {string} environmentType - “Sled”/”FileStats”/”BundleStats”/”Android”/”iOS”/”Node”/”Browser”/”Lambda”/”SiteMetrics”\n * @property {string} validationType - \"BenchmarkUserLimit\"/\"BundleDegradationFromUpstream\"/\"TransferSizeDegradationFromUpstreamDefault\" -- and another few examples\n * @property {string} allowedValue - Maximum allowed value for benchmark - relevant for absolute + relative\n * @property {string} metricCategory - “Bundle Size”/”Browser Benchmarks”/”Lighthouse Benchmark”/”Others” -- derived from environmentType\n * @property {string} baselineValue - Latest master value\n * @property {string} actualValue - Actual calculated value\n * @return {LogObject<perferMetricResultParams>} LogObject<perferMetricResultParams>\n */\nexport function perferMetricResult(params: perferMetricResultParams): LogObject<perferMetricResultParams> {\n  return { evid: 91205, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferTestStarted' event (evid: 91206)\n *\n * Event description: Sent when a Perfer test is started on the client side\n *\n * @param {perferTestStartedParams} params - The parameters for this event\n * @property {string} fingerprint - The build’s unique fingerprint\n * @property {string} branch - Which branch is used\n * @property {string} fileName - For which file is this benchmark written\n * @property {string} benchmarkName - Example: “my benchmark”\n * @property {string} version - Perfer version\n * @property {string} environmentType - “Sled”/”FileStats”/”BundleStats”/”Android”/”iOS”/”Node”/”Browser”/”Lambda”/”SiteMetrics”\n * @property {string} test_run_id - Unique ID of test\n * @property {string} metricCategory - “Bundle Size”/”Browser Benchmarks”/”Lighthouse Benchmarks”/”Others”\n * @return {LogObject<perferTestStartedParams>} LogObject<perferTestStartedParams>\n */\nexport function perferTestStarted(params: perferTestStartedParams): LogObject<perferTestStartedParams> {\n  return { evid: 91206, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferTestEnded' event (evid: 91207)\n *\n * Event description: Sent when a Perfer test has ended on the client side\n *\n * @param {perferTestEndedParams} params - The parameters for this event\n * @property {string} fingerprint - The build’s unique fingerprint\n * @property {string} errorMessage - The error message displayed, if Perfer failed\n * @property {string} result - 'OK' | 'Runtime Error' | 'Validation Error' | 'Error\n * @property {string} branch - Which branch is used\n * @property {string} fileName - For which file is this benchmark written\n * @property {string} benchmarkName - Example: “my benchmark”\n * @property {string} version - Perfer version\n * @property {string} environmentType - “Sled”/”FileStats”/”BundleStats”/”Android”/”iOS”/”Node”/”Browser”/”Lambda”/”SiteMetrics”\n * @property {string} test_run_id - Unique ID of test\n * @property {string} metricCategory - “Bundle Size”/”Browser Benchmarks”/”Lighthouse Benchmarks”/”Others”\n * @return {LogObject<perferTestEndedParams>} LogObject<perferTestEndedParams>\n */\nexport function perferTestEnded(params: perferTestEndedParams): LogObject<perferTestEndedParams> {\n  return { evid: 91207, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferReportOpened' event (evid: 91211)\n *\n * Event description: Sent when a Perfer report is opened by a user\n *\n * @param {perferReportOpenedParams} params - The parameters for this event\n * @property {string} artifactId - For which artifact did Perfer run\n * @property {string} fingerprint - The build’s unique fingerprint\n * @property {string} result - \"Passed\"/\"Failed\"\n * @property {string} branch - Which branch is used\n * @property {string} perferRunId - Unique ID of Perfer request\n * @property {string} urlOpened - The Perfer report URL\n * @property {number} numRulesFailed - How many non Beta rules failed/violations were found in this run\n * @return {LogObject<perferReportOpenedParams>} LogObject<perferReportOpenedParams>\n */\nexport function perferReportOpened(params: perferReportOpenedParams): LogObject<perferReportOpenedParams> {\n  return { evid: 91211, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferClickOnResetArtifactSBaselineButton' event (evid: 91212)\n *\n * Event description: Sent when a user clicks the button titled “Reset artifact’s baseline” in Perfer report\n *\n * @param {perferClickOnResetArtifactSBaselineButtonParams} params - The parameters for this event\n * @property {string} artifactId - For which artifact did Perfer run\n * @property {string} perferRunId - Unique ID of Perfer request\n * @property {string} urlOpened - The Perfer report URL\n * @return {LogObject<perferClickOnResetArtifactSBaselineButtonParams>} LogObject<perferClickOnResetArtifactSBaselineButtonParams>\n */\nexport function perferClickOnResetArtifactSBaselineButton(params: perferClickOnResetArtifactSBaselineButtonParams): LogObject<perferClickOnResetArtifactSBaselineButtonParams> {\n  return { evid: 91212, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferResetArtifactSBaseline' event (evid: 91213)\n *\n * Event description: Sent when a user clicks the button titled “I understand, commit baseline reset” in Perfer report\n *\n * @param {perferResetArtifactSBaselineParams} params - The parameters for this event\n * @property {string} artifactId - For which artifact did Perfer run\n * @property {string} perferRunId - Unique ID of Perfer request\n * @property {string} urlOpened - The Perfer report URL\n * @property {string} user - Which user opened the report\n * @return {LogObject<perferResetArtifactSBaselineParams>} LogObject<perferResetArtifactSBaselineParams>\n */\nexport function perferResetArtifactSBaseline(params: perferResetArtifactSBaselineParams): LogObject<perferResetArtifactSBaselineParams> {\n  return { evid: 91213, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'buildStart' event (evid: 91400)\n *\n * Event description: Sent for each CI build start\n *\n * @param {buildStartParams} params - The parameters for this event\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {string} email - User email\n * @property {boolean} isMasterCi - TRUE if the CI run is on master; FALSE if PR or not CI run\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - The typescript version used in the project.\n * @return {LogObject<buildStartParams>} LogObject<buildStartParams>\n */\nexport function buildStart(params: buildStartParams): LogObject<buildStartParams> {\n  return { evid: 91400, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'startInit' event (evid: 91401)\n *\n * Event description: Track the \"start\" command init in yoshi projects\n *\n * @param {startInitParams} params - The parameters for this event\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {string} email - User email\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - The TypeScript version used in the project.\n * @return {LogObject<startInitParams>} LogObject<startInitParams>\n */\nexport function startInit(params: startInitParams): LogObject<startInitParams> {\n  return { evid: 91401, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'createProject' event (evid: 91402)\n *\n * Event description: Track newly generated project using create-yoshi-app\n *\n * @param {createProjectParams} params - The parameters for this event\n * @property {string} monorepoManagementTool - Monorepo management tool name (available when CYA running inside monorepo).\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {string} email - User email\n * @property {string} templateName - The template chosen by the user\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {boolean} isInsideMonorepo - Is CYA running in Yoshi supported monorepo.\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @return {LogObject<createProjectParams>} LogObject<createProjectParams>\n */\nexport function createProject(params: createProjectParams): LogObject<createProjectParams> {\n  return { evid: 91402, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'buildEnd' event (evid: 91403)\n *\n * Event description: Fired when a Yoshi CI build has finished and adds data related to it.\n *\n * @param {buildEndParams} params - The parameters for this event\n * @property {number} buildDuration - How long building took in seconds\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {string} email - User email\n * @property {boolean} isMasterCi - TRUE if the CI run is on master; FALSE if PR or not CI run\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} totalCssBundleSize - The total size of all CSS files in KBs (GZIP)\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {number} totalImagesBundleSize - The total size of all image files in KBs (GZIP)\n * @property {number} totalClientBundleSize - The total size of the minified bundle in KBs (GZIP)\n * @property {number} totalJsBundleSize - The total size of all JS files in KBs (GZIP)\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - The typescript version used in the project.\n * @return {LogObject<buildEndParams>} LogObject<buildEndParams>\n */\nexport function buildEnd(params: buildEndParams): LogObject<buildEndParams> {\n  return { evid: 91403, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'yoshiYarnStartFinished' event (evid: 91405)\n *\n * Event description: Sent when Yoshi is ready to load the page after the user types the \"yarn start\" command\n *\n * @param {yoshiYarnStartFinishedParams} params - The parameters for this event\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {number} duration - The time it took from the \"yarn start\" command (event 91404) to Yoshi's readiness to load the page (in ms)\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {string} email - User email\n * @property {boolean} isMasterCi - TRUE if the CI run is on master; FALSE if PR or not CI run\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} yoshiMajorVersion - yoshi_major_version\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - typescript_version\n * @return {LogObject<yoshiYarnStartFinishedParams>} LogObject<yoshiYarnStartFinishedParams>\n */\nexport function yoshiYarnStartFinished(params: yoshiYarnStartFinishedParams): LogObject<yoshiYarnStartFinishedParams> {\n  return { evid: 91405, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'yoshiTestsRunStart' event (evid: 91406)\n *\n * Event description: Sent when Yoshi starts running tests for a specific project\n *\n * @param {yoshiTestsRunStartParams} params - The parameters for this event\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {number} numTests - Number of tests Yoshi is running\n * @property {string} email - User email\n * @property {boolean} isMasterCi - TRUE if the CI run is on master; FALSE if PR or not CI run\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - The typescript version used in the project.\n * @return {LogObject<yoshiTestsRunStartParams>} LogObject<yoshiTestsRunStartParams>\n */\nexport function yoshiTestsRunStart(params: yoshiTestsRunStartParams): LogObject<yoshiTestsRunStartParams> {\n  return { evid: 91406, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'yoshiTestsRunEnd' event (evid: 91407)\n *\n * Event description: Sent when Yoshi is done running tests for a specific project\n *\n * @param {yoshiTestsRunEndParams} params - The parameters for this event\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {number} duration - Time it took to run all tests (in ms)\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {number} numTests - Number of tests Yoshi is running\n * @property {string} email - User email\n * @property {string} result - Was the run successful or not\n * @property {boolean} isMasterCi - TRUE if the CI run is on master; FALSE if PR or not CI run\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - The typescript version used in the project.\n * @return {LogObject<yoshiTestsRunEndParams>} LogObject<yoshiTestsRunEndParams>\n */\nexport function yoshiTestsRunEnd(params: yoshiTestsRunEndParams): LogObject<yoshiTestsRunEndParams> {\n  return { evid: 91407, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'yoshiCodeChangeDetected' event (evid: 91408)\n *\n * Event description: Sent when Yoshi detects the user has changed code in the project\n *\n * @param {yoshiCodeChangeDetectedParams} params - The parameters for this event\n * @property {boolean} isCI - Should be true if was fired from a CI environment\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {string} email - User email\n * @property {string} compilationType - Did the user change the client, server, or Yoshi server code\n * @property {boolean} isMasterCi - TRUE if the CI run is on master; FALSE if PR or not CI run\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - The typescript version used in the project.\n * @return {LogObject<yoshiCodeChangeDetectedParams>} LogObject<yoshiCodeChangeDetectedParams>\n */\nexport function yoshiCodeChangeDetected(params: yoshiCodeChangeDetectedParams): LogObject<yoshiCodeChangeDetectedParams> {\n  return { evid: 91408, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'yoshiReadyForReloadAfterCodeChange' event (evid: 91409)\n *\n * Event description: Sent when Yoshi is ready to reload the page after it has detected the user has changed code in the project\n *\n * @param {yoshiReadyForReloadAfterCodeChangeParams} params - The parameters for this event\n * @property {boolean} isCI - is_ciboo\n * @property {number} duration - Time it took for Yoshi to be ready to load the page after the code change (in ms)\n * @property {string} projectName - The name of the project (name in package.json).\n * @property {number} nodeMajorVersion - The major version of Node used in the project.\n * @property {string} email - User email\n * @property {string} compilationType - Did the user change the client, server, or Yoshi server code\n * @property {boolean} isMasterCi - TRUE if the CI run is on master; FALSE if PR or not CI run\n * @property {string} projectLanguage - The language used in the project. Can be either TS or JS.\n * @property {number} yoshiMajorVersion - The major version of Yoshi used in the project.\n * @property {string} yoshiFlow - Should return a string with the used yoshi flow (e.g. yoshi-flow-editor))\n * @property {string} yoshiVersion - The semver version of Yoshi used in the project.\n * @property {string} typescriptVersion - The typescript version used in the project.\n * @return {LogObject<yoshiReadyForReloadAfterCodeChangeParams>} LogObject<yoshiReadyForReloadAfterCodeChangeParams>\n */\nexport function yoshiReadyForReloadAfterCodeChange(params: yoshiReadyForReloadAfterCodeChangeParams): LogObject<yoshiReadyForReloadAfterCodeChangeParams> {\n  return { evid: 91409, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferTestResult' event (evid: 91501)\n *\n * Event description: Sent for every test in Perfer Bundle or in Lightouse (total download size)\n *\n * @param {perferTestResultParams} params - The parameters for this event\n * @property {string} artifactId - The artifact id\n * @property {string} testName - The test name (can be null if Perfer bundles)\n * @property {string} fingerprint - The fignretprint\n * @property {string} result - The tests result could be fail or pass (for Perfer bundle will be fail if at least 1 bundle failed 1 metric)\n * @property {string} branch - The branch name\n * @property {string} fileName - The file name  (can be null if Perfer bundles)\n * @property {string} type - The type of test, can be Perfer bundle or Total Download Size\n * @property {string} runId - The run id\n * @return {LogObject<perferTestResultParams>} LogObject<perferTestResultParams>\n */\nexport function perferTestResult(params: perferTestResultParams): LogObject<perferTestResultParams> {\n  return { evid: 91501, src: 11, endpoint: '', params };\n}\n\n/**\n * A function to create a log object for the 'perferBundleResult' event (evid: 91502)\n *\n * Event description: Sent for every bundle result in Perfer\n *\n * @param {perferBundleResultParams} params - The parameters for this event\n * @property {string} artifactId - The artifact id\n * @property {string} testName - The test name (will be null if Perfer bundle test)\n * @property {string} fingerprint - The fingerprint\n * @property {string} bundle - The bundle name\n * @property {string} size - The actual bundle size in byte\n * @property {number} absoluteLimit - The absolute limit for the bundle (in byte), can be null if no limit specified\n * @property {string} result - The result (pass/fail)\n * @property {string} branch - The branch name\n * @property {string} fileName - The file name (will be null if Perfer bundle)\n * @property {number} relativeLimit - The relative limit for the bundle (in percentage between 0-100), can be null if no limit specified\n * @property {string} testId - The test id\n * @property {string} type - TDS or Perfer Bundle\n * @property {string} baselineValue - The baseline size in byte\n * @return {LogObject<perferBundleResultParams>} LogObject<perferBundleResultParams>\n */\nexport function perferBundleResult(params: perferBundleResultParams): LogObject<perferBundleResultParams> {\n  return { evid: 91502, src: 11, endpoint: '', params };\n}\n"],"mappings":";;;;;;;AAEA;AAuuDM,SAAU,0BAA0B,QAAuC;AAC/E,SAAO,EAAE,MAAM,MAAM,KAAK,IAAI,UAAU,IAAI,OAAM;AACpD;AA2CM,SAAU,aAAa,QAA0B;AACrD,SAAO,EAAE,MAAM,MAAM,KAAK,IAAI,UAAU,IAAI,OAAM;AACpD;AAuCM,SAAU,gDAAgD,QAA6D;AAC3H,SAAO,EAAE,MAAM,MAAM,KAAK,IAAI,UAAU,IAAI,OAAM;AACpD;","names":[]}