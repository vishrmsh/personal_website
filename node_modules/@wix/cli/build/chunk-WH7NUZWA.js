import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  ProjectModelProvider,
  loadProjectModel
} from "./chunk-HP474T73.js";
import {
  addUserFields,
  reportCommandStartEvent
} from "./chunk-3WK2RM54.js";
import {
  AccountAuthProvider
} from "./chunk-67NUBEMP.js";
import {
  BiProvider,
  DebugLogProvider,
  ErrorReporterProvider
} from "./chunk-WWUS5636.js";
import {
  render
} from "./chunk-RXATQXHV.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import {
  getDebugLogFilePath
} from "./chunk-TKDDSH55.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-astro-commands/src/commands/render-command.tsx
init_esm_shims();
var import_react = __toESM(require_react(), 1);
import { cwd } from "node:process";
async function initServices(model, { biLogger, errorReporter }) {
  errorReporter.setContext("astro app info", {
    appId: model.config.appId
  });
  biLogger.updateDefaults({
    _appId: model.config.appId
  });
}
async function renderCommand(command, { biLogger, errorReporter }, cliVersion, tree) {
  await runCommand(
    command,
    { biLogger, errorReporter },
    cliVersion,
    async (model) => {
      biLogger.updateDefaults({ command: command.name() });
      const debugLogFilePath = getDebugLogFilePath(model.projectFolder);
      const handleLogin = (userInfo) => {
        errorReporter.setUser({ id: userInfo.userId });
        addUserFields(biLogger, userInfo.userId);
      };
      await render(
        /* @__PURE__ */ import_react.default.createElement(BiProvider, { value: biLogger }, /* @__PURE__ */ import_react.default.createElement(ErrorReporterProvider, { value: errorReporter }, /* @__PURE__ */ import_react.default.createElement(AccountAuthProvider, { onLogin: handleLogin }, /* @__PURE__ */ import_react.default.createElement(DebugLogProvider, { filePath: debugLogFilePath }, /* @__PURE__ */ import_react.default.createElement(ProjectModelProvider, { value: model }, tree)))))
      );
    }
  );
}
async function runCommand(command, services, cliVersion, commandFn) {
  const model = await loadProjectModel(cwd());
  await initServices(model, services);
  services.biLogger.updateDefaults({
    command: command.name()
  });
  const commandStatus = reportCommandStartEvent({
    biLogger: services.biLogger,
    command,
    cliVersion,
    flow: "Astro",
    extensions: {},
    extraFields: void 0
  });
  try {
    await commandFn(model);
    commandStatus.succeed();
  } catch (e) {
    commandStatus.failed(e);
    throw e;
  }
}

export {
  renderCommand,
  runCommand
};
//# sourceMappingURL=chunk-WH7NUZWA.js.map