{"version":3,"sources":["../../cli-site-old/src/model.tsx","../../cli-site-old/src/files/velo.config.ts"],"sourcesContent":["import type { FC, ReactNode } from 'react';\nimport React, { createContext, useContext } from 'react';\nimport type { VeloConfig } from '@wix/cli-site-old-definitions';\nimport { loadVeloConfig, saveVeloConfig } from './files/velo.config.js';\n\nexport interface ProjectModel {\n  projectFolder: string;\n  metaSiteId: string;\n  revision: string;\n}\n\nexport async function loadProjectModel(\n  projectFolder: string\n): Promise<ProjectModel> {\n  const config = await loadVeloConfig(projectFolder);\n  return {\n    projectFolder,\n    metaSiteId: config.siteId,\n    revision: config.uiVersion,\n  };\n}\n\nexport async function saveProjectModel(model: ProjectModel): Promise<void> {\n  const config: VeloConfig = {\n    siteId: model.metaSiteId,\n    uiVersion: model.revision,\n  };\n\n  await saveVeloConfig(model.projectFolder, config);\n}\n\ninterface ProjectModelState {\n  model: ProjectModel;\n}\n\nconst ProjectModelContext = createContext<ProjectModelState | null>(null);\n\ninterface Props {\n  value: ProjectModel;\n  children: ReactNode;\n}\n\nexport const ProjectModelProvider: FC<Props> = ({ value: model, children }) => {\n  return (\n    <ProjectModelContext.Provider value={{ model }}>\n      {children}\n    </ProjectModelContext.Provider>\n  );\n};\n\nexport function useProjectModel(): ProjectModelState {\n  const context = useContext(ProjectModelContext);\n  if (context == null) {\n    throw new Error(\n      'useProjectModel() cannot be used without an <ProjectModelProvider>'\n    );\n  }\n  return context;\n}\n","import type { VeloConfig } from '@wix/cli-site-old-definitions';\nimport {\n  WIX_CONFIG_FILENAME,\n  getWixConfigFilePath,\n} from '@wix/cli-core-definitions';\nimport { veloConfigSchema } from '@wix/cli-site-old-definitions';\nimport { readJson, writeJson } from '@wix/cli-fs';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\n\nexport async function saveVeloConfig(\n  projectFolder: string,\n  config: VeloConfig\n) {\n  await writeJson(getWixConfigFilePath(projectFolder), config, {\n    spaces: 2,\n  });\n}\n\nexport async function loadVeloConfig(projectFolder: string) {\n  const configFile = await readJson(getWixConfigFilePath(projectFolder));\n\n  try {\n    return veloConfigSchema.parse(configFile);\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.InvalidVeloConfigJson({\n        configFilename: WIX_CONFIG_FILENAME,\n      }),\n      cause: e,\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,mBAAiD;;;ACDjD;AASA,eAAsB,eACpB,eACA,QACA;AACA,QAAM,UAAU,qBAAqB,aAAa,GAAG,QAAQ;AAAA,IAC3D,QAAQ;AAAA,EACV,CAAC;AACH;AAEA,eAAsB,eAAe,eAAuB;AAC1D,QAAM,aAAa,MAAM,SAAS,qBAAqB,aAAa,CAAC;AAErE,MAAI;AACF,WAAO,iBAAiB,MAAM,UAAU;AAAA,EAC1C,SAAS,GAAG;AACV,UAAM,IAAI,SAAS;AAAA,MACjB,MAAM,aAAa,sBAAsB;AAAA,QACvC,gBAAgB;AAAA,MAClB,CAAC;AAAA,MACD,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;;;ADpBA,eAAsB,iBACpB,eACuB;AACvB,QAAM,SAAS,MAAM,eAAe,aAAa;AACjD,SAAO;AAAA,IACL;AAAA,IACA,YAAY,OAAO;AAAA,IACnB,UAAU,OAAO;AAAA,EACnB;AACF;AAEA,eAAsB,iBAAiB,OAAoC;AACzE,QAAM,SAAqB;AAAA,IACzB,QAAQ,MAAM;AAAA,IACd,WAAW,MAAM;AAAA,EACnB;AAEA,QAAM,eAAe,MAAM,eAAe,MAAM;AAClD;AAMA,IAAM,0BAAsB,4BAAwC,IAAI;AAOjE,IAAM,uBAAkC,CAAC,EAAE,OAAO,OAAO,SAAS,MAAM;AAC7E,SACE,6BAAAA,QAAA,cAAC,oBAAoB,UAApB,EAA6B,OAAO,EAAE,MAAM,KAC1C,QACH;AAEJ;AAEO,SAAS,kBAAqC;AACnD,QAAM,cAAU,yBAAW,mBAAmB;AAC9C,MAAI,WAAW,MAAM;AACnB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;","names":["React"]}