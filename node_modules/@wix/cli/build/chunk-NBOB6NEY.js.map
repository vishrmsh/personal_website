{"version":3,"sources":["../../cli-site-old/src/utils.ts","../../cli-site-old/src/gridapp/loadProjectGridAppContent.ts"],"sourcesContent":["import { readdir, readFile, stat } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport { extractHttpError, isHttpApplicationError } from '@wix/cli-http-client';\n\n/**\n * reads a file contents recursively and returns an array of all files\n */\nexport async function readFiles(\n  dir: string,\n  subPath = ''\n): Promise<Array<{ path: string; content: string }>> {\n  return (\n    await Promise.all(\n      (await readdir(join(dir, subPath))).map(async (file) => {\n        const path = join(subPath, file);\n        if ((await stat(join(dir, path))).isDirectory()) {\n          return readFiles(dir, path);\n        }\n        return {\n          path,\n          content: await readFile(join(dir, path), 'utf-8'),\n        };\n      })\n    )\n  ).flat();\n}\n\nexport function isSiteNotPublishedError(err: unknown) {\n  const httpError = extractHttpError(err);\n\n  if (httpError && isHttpApplicationError(httpError)) {\n    const errorCode = httpError.response?.data.details.applicationError.code;\n\n    if (errorCode === 'SITE_NOT_PUBLISHED') {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import { join } from 'node:path';\nimport { readFile } from 'node:fs/promises';\nimport { GridAppLayout } from '@wix/ambassador-velo-apps-v1-app/types';\nimport { getSourceFolder } from '@wix/velo-github-layout-definitions';\nimport normalizePath from 'normalize-path';\nimport { pathExists } from '@wix/cli-fs';\nimport { CliError, CliErrorCode } from '@wix/cli-error';\nimport { WIX_LOCK_FILENAME } from '@wix/cli-core-definitions';\nimport { readFiles } from '../utils.js';\n\ninterface File {\n  path: string;\n  content: string;\n}\n\nasync function readFileOrThrow(path: string): Promise<string> {\n  try {\n    return await readFile(path, 'utf-8');\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.FailedToReadProjectFiles(),\n      cause: e,\n    });\n  }\n}\n\nasync function readFilesOrThrow(root: string): Promise<File[]> {\n  try {\n    return await readFiles(root);\n  } catch (e) {\n    throw new CliError({\n      code: CliErrorCode.FailedToReadProjectFiles(),\n      cause: e,\n    });\n  }\n}\n\nasync function loadProjectRootFiles(projectFolder: string) {\n  if (await pathExists(join(projectFolder, WIX_LOCK_FILENAME))) {\n    return Promise.all(\n      ['package.json', WIX_LOCK_FILENAME].map(async (path) => {\n        const content = await readFileOrThrow(join(projectFolder, path));\n\n        return { path, content };\n      })\n    );\n  }\n\n  return [];\n}\n\nexport async function loadProjectGridAppContent(projectFolder: string) {\n  const sourceFiles = (\n    await readFilesOrThrow(getSourceFolder(projectFolder))\n  ).map((file) => ({\n    content: file.content,\n    path: normalizePath(join(getSourceFolder(''), file.path)),\n  }));\n\n  const rootFiles = await loadProjectRootFiles(projectFolder);\n\n  return {\n    ignoreForbiddenPaths: true,\n    layout: GridAppLayout.GITHUB,\n    files: sourceFiles.concat(rootFiles),\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAS,SAAS,UAAU,YAAY;AACxC,SAAS,YAAY;AAMrB,eAAsB,UACpB,KACA,UAAU,IACyC;AACnD,UACE,MAAM,QAAQ;AAAA,KACX,MAAM,QAAQ,KAAK,KAAK,OAAO,CAAC,GAAG,IAAI,OAAO,SAAS;AACtD,YAAM,OAAO,KAAK,SAAS,IAAI;AAC/B,WAAK,MAAM,KAAK,KAAK,KAAK,IAAI,CAAC,GAAG,YAAY,GAAG;AAC/C,eAAO,UAAU,KAAK,IAAI;AAAA,MAC5B;AACA,aAAO;AAAA,QACL;AAAA,QACA,SAAS,MAAM,SAAS,KAAK,KAAK,IAAI,GAAG,OAAO;AAAA,MAClD;AAAA,IACF,CAAC;AAAA,EACH,GACA,KAAK;AACT;AAEO,SAAS,wBAAwB,KAAc;AACpD,QAAM,YAAY,iBAAiB,GAAG;AAEtC,MAAI,aAAa,uBAAuB,SAAS,GAAG;AAClD,UAAM,YAAY,UAAU,UAAU,KAAK,QAAQ,iBAAiB;AAEpE,QAAI,cAAc,sBAAsB;AACtC,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;;;ACvCA;AAAA,SAAS,QAAAA,aAAY;AACrB,SAAS,YAAAC,iBAAgB;AAGzB,4BAA0B;AAW1B,eAAe,gBAAgB,MAA+B;AAC5D,MAAI;AACF,WAAO,MAAMC,UAAS,MAAM,OAAO;AAAA,EACrC,SAAS,GAAG;AACV,UAAM,IAAI,SAAS;AAAA,MACjB,MAAM,aAAa,yBAAyB;AAAA,MAC5C,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;AAEA,eAAe,iBAAiB,MAA+B;AAC7D,MAAI;AACF,WAAO,MAAM,UAAU,IAAI;AAAA,EAC7B,SAAS,GAAG;AACV,UAAM,IAAI,SAAS;AAAA,MACjB,MAAM,aAAa,yBAAyB;AAAA,MAC5C,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;AAEA,eAAe,qBAAqB,eAAuB;AACzD,MAAI,MAAM,WAAWC,MAAK,eAAe,iBAAiB,CAAC,GAAG;AAC5D,WAAO,QAAQ;AAAA,MACb,CAAC,gBAAgB,iBAAiB,EAAE,IAAI,OAAO,SAAS;AACtD,cAAM,UAAU,MAAM,gBAAgBA,MAAK,eAAe,IAAI,CAAC;AAE/D,eAAO,EAAE,MAAM,QAAQ;AAAA,MACzB,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO,CAAC;AACV;AAEA,eAAsB,0BAA0B,eAAuB;AACrE,QAAM,eACJ,MAAM,iBAAiB,gBAAgB,aAAa,CAAC,GACrD,IAAI,CAAC,UAAU;AAAA,IACf,SAAS,KAAK;AAAA,IACd,UAAM,sBAAAC,SAAcD,MAAK,gBAAgB,EAAE,GAAG,KAAK,IAAI,CAAC;AAAA,EAC1D,EAAE;AAEF,QAAM,YAAY,MAAM,qBAAqB,aAAa;AAE1D,SAAO;AAAA,IACL,sBAAsB;AAAA,IACtB,QAAQ,cAAc;AAAA,IACtB,OAAO,YAAY,OAAO,SAAS;AAAA,EACrC;AACF;","names":["join","readFile","readFile","join","normalizePath"]}