{"version":3,"sources":["../../cli-site-live/src/commands/render-command.tsx"],"sourcesContent":["import { cwd } from 'node:process';\nimport React from 'react';\nimport type { ReactElement } from 'react';\nimport { SiteAuthProvider } from '@wix/cli-auth';\nimport type { UserInfo } from '@wix/cli-auth';\nimport { render } from '@wix/cli-ui-kit';\nimport { I18nProvider } from '@wix/cli-i18n';\nimport { ErrorReporterProvider } from '@wix/cli-error-reporting';\nimport { BiProvider } from '@wix/cli-telemetry-react';\nimport { addUserFields, reportCommandStartEvent } from '@wix/cli-telemetry';\nimport type { CommandServices } from '@wix/cli-command-contract';\nimport type { Command } from '@commander-js/extra-typings';\nimport type { ProjectModel } from '../model.js';\nimport { ProjectModelProvider, loadProjectModel } from '../model.js';\nimport messages from '../messages.json' with { type: 'json' };\n\nasync function initServices(\n  { metaSiteId }: ProjectModel,\n  { biLogger, errorReporter }: CommandServices\n) {\n  errorReporter.setContext('site info', {\n    siteId: metaSiteId,\n  });\n\n  biLogger.updateDefaults({\n    _msid: metaSiteId,\n  });\n}\n\nexport async function renderCommand(\n  command: Command,\n  services: CommandServices,\n  cliVersion: string,\n  component: ReactElement\n) {\n  await runCommand(command, services, cliVersion, async (model) => {\n    const { biLogger, errorReporter } = services;\n\n    const handleLogin = (userInfo: UserInfo) => {\n      errorReporter.setUser({ id: userInfo.userId });\n      addUserFields(biLogger, userInfo.userId);\n    };\n\n    await render(\n      <BiProvider value={biLogger}>\n        <ErrorReporterProvider value={errorReporter}>\n          <SiteAuthProvider siteId={model.metaSiteId} onLogin={handleLogin}>\n            <I18nProvider messages={messages}>\n              <ProjectModelProvider model={model}>\n                {component}\n              </ProjectModelProvider>\n            </I18nProvider>\n          </SiteAuthProvider>\n        </ErrorReporterProvider>\n      </BiProvider>\n    );\n  });\n}\n\nasync function runCommand(\n  command: Command,\n  services: CommandServices,\n  cliVersion: string,\n  commandFn: (model: ProjectModel) => Promise<void>\n) {\n  const model = await loadProjectModel(cwd());\n\n  await initServices(model, services);\n\n  const commandStatus = reportCommandStartEvent({\n    biLogger: services.biLogger,\n    command,\n    cliVersion,\n    flow: 'Sites_OpenGridApp',\n  });\n\n  try {\n    await commandFn(model);\n    commandStatus.succeed();\n  } catch (e) {\n    commandStatus.failed(e);\n    throw e;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,mBAAkB;AADlB,SAAS,WAAW;AAgBpB,eAAe,aACb,EAAE,WAAW,GACb,EAAE,UAAU,cAAc,GAC1B;AACA,gBAAc,WAAW,aAAa;AAAA,IACpC,QAAQ;AAAA,EACV,CAAC;AAED,WAAS,eAAe;AAAA,IACtB,OAAO;AAAA,EACT,CAAC;AACH;AAEA,eAAsB,cACpB,SACA,UACA,YACA,WACA;AACA,QAAM,WAAW,SAAS,UAAU,YAAY,OAAO,UAAU;AAC/D,UAAM,EAAE,UAAU,cAAc,IAAI;AAEpC,UAAM,cAAc,CAAC,aAAuB;AAC1C,oBAAc,QAAQ,EAAE,IAAI,SAAS,OAAO,CAAC;AAC7C,oBAAc,UAAU,SAAS,MAAM;AAAA,IACzC;AAEA,UAAM;AAAA,MACJ,6BAAAA,QAAA,cAAC,cAAW,OAAO,YACjB,6BAAAA,QAAA,cAAC,yBAAsB,OAAO,iBAC5B,6BAAAA,QAAA,cAAC,oBAAiB,QAAQ,MAAM,YAAY,SAAS,eACnD,6BAAAA,QAAA,cAAC,gBAAa,UAAU,oBACtB,6BAAAA,QAAA,cAAC,wBAAqB,SACnB,SACH,CACF,CACF,CACF,CACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAe,WACb,SACA,UACA,YACA,WACA;AACA,QAAM,QAAQ,MAAM,iBAAiB,IAAI,CAAC;AAE1C,QAAM,aAAa,OAAO,QAAQ;AAElC,QAAM,gBAAgB,wBAAwB;AAAA,IAC5C,UAAU,SAAS;AAAA,IACnB;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EACR,CAAC;AAED,MAAI;AACF,UAAM,UAAU,KAAK;AACrB,kBAAc,QAAQ;AAAA,EACxB,SAAS,GAAG;AACV,kBAAc,OAAO,CAAC;AACtB,UAAM;AAAA,EACR;AACF;","names":["React"]}