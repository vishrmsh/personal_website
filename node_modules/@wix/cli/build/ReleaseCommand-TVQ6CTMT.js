import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  PreviewCommand,
  assertBuildOutputExists
} from "./chunk-G7FWYSLV.js";
import {
  useARMClient
} from "./chunk-J6Y43SSW.js";
import {
  useDevCenterClient
} from "./chunk-IRABMMYU.js";
import "./chunk-O3SZ563W.js";
import "./chunk-RWTQFIPN.js";
import "./chunk-W54PG6O5.js";
import "./chunk-MC5QQOVO.js";
import "./chunk-J5YVHTPQ.js";
import "./chunk-4R5RNIW3.js";
import {
  useProjectModel
} from "./chunk-HP474T73.js";
import "./chunk-PIXNEJ52.js";
import "./chunk-HWVLWVTF.js";
import "./chunk-67NUBEMP.js";
import {
  require_parse
} from "./chunk-WWUS5636.js";
import "./chunk-SJKVYZPL.js";
import "./chunk-UQLHXG4X.js";
import "./chunk-KJ37XZQA.js";
import {
  Alert,
  Box_default,
  Spinner,
  Text,
  useAsync,
  useAsyncCallback
} from "./chunk-RXATQXHV.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-Z4MHKCET.js";
import "./chunk-C4SUTB4O.js";
import "./chunk-TKDDSH55.js";
import "./chunk-62BYZXT7.js";
import "./chunk-WYHHEOWO.js";
import "./chunk-Z3Y5NFYG.js";
import "./chunk-ZXYGJZOO.js";
import {
  CliError,
  CliErrorCode,
  require_lib
} from "./chunk-IVMK6TVY.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-astro-commands/src/components/ReleaseCommand/index.ts
init_esm_shims();

// ../cli-astro-commands/src/components/ReleaseCommand/ReleaseCommand.tsx
init_esm_shims();
var import_react4 = __toESM(require_react(), 1);
var import_variant3 = __toESM(require_lib(), 1);
var import_parse = __toESM(require_parse(), 1);

// ../cli-astro-commands/src/components/ReleaseCommand/Release.tsx
init_esm_shims();
var import_react2 = __toESM(require_react(), 1);
var import_variant = __toESM(require_lib(), 1);

// ../cli-astro-commands/src/components/ReleaseCommand/Steps/CreatePreview.tsx
init_esm_shims();
var import_react = __toESM(require_react(), 1);
var CreatePreview = (props) => {
  const { baseUrl, label, onCreated } = props;
  return /* @__PURE__ */ import_react.default.createElement(Box_default, { flexDirection: "column", gap: 1 }, /* @__PURE__ */ import_react.default.createElement(Text, null, "Before creating a new version, let's create a preview of your app"), /* @__PURE__ */ import_react.default.createElement(Box_default, { flexDirection: "column" }, /* @__PURE__ */ import_react.default.createElement(
    PreviewCommand,
    {
      baseUrl,
      label,
      onPreviewCreated: onCreated,
      environment: "production"
    }
  )));
};

// ../cli-astro-commands/src/components/ReleaseCommand/Release.tsx
var Release = ({ baseUrl, label }) => {
  const {
    model: {
      config: { appId }
    }
  } = useProjectModel();
  const { release } = useARMClient();
  const releaseAction = useAsyncCallback(async (_, tag) => {
    const baseUrl2 = await release(appId, tag);
    return {
      baseUrl: baseUrl2
    };
  });
  function onPreviewCreated({ previewId }) {
    return releaseAction.execute(previewId);
  }
  return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, /* @__PURE__ */ import_react2.default.createElement(
    CreatePreview,
    {
      baseUrl,
      label,
      onCreated: ({ previewId }) => onPreviewCreated({ previewId })
    }
  ), (0, import_variant.match)(releaseAction.status, {
    NotRequested: () => null,
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react2.default.createElement(Spinner, { text: /* @__PURE__ */ import_react2.default.createElement(Text, null, "Releasing...") }),
    Success: ({ result: { baseUrl: baseUrl2 } }) => /* @__PURE__ */ import_react2.default.createElement(Box_default, { flexDirection: "column", gap: 1 }, /* @__PURE__ */ import_react2.default.createElement(Alert, { type: "success" }, /* @__PURE__ */ import_react2.default.createElement(Text, { bold: true }, "Site published on ", baseUrl2)))
  }));
};

// ../cli-astro-commands/src/components/ReleaseCommand/ReleaseOnlyTag.tsx
init_esm_shims();
var import_react3 = __toESM(require_react(), 1);
var import_variant2 = __toESM(require_lib(), 1);
var ReleaseOnlyTag = ({ previewId }) => {
  const {
    model: {
      config: { appId }
    }
  } = useProjectModel();
  const { release } = useARMClient();
  const { status } = useAsync(async () => {
    const baseUrl = await release(appId, previewId);
    return {
      baseUrl
    };
  }, []);
  return /* @__PURE__ */ import_react3.default.createElement(import_react3.default.Fragment, null, (0, import_variant2.match)(status, {
    NotRequested: () => null,
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react3.default.createElement(Spinner, { text: /* @__PURE__ */ import_react3.default.createElement(Text, null, "Releasing...") }),
    Success: ({ result: { baseUrl } }) => /* @__PURE__ */ import_react3.default.createElement(Box_default, { flexDirection: "column", gap: 1 }, /* @__PURE__ */ import_react3.default.createElement(Alert, { type: "success" }, /* @__PURE__ */ import_react3.default.createElement(Text, { bold: true }, "Site published on ", baseUrl)))
  }));
};

// ../cli-astro-commands/src/components/ReleaseCommand/ReleaseCommand.tsx
var ReleaseCommand = (props) => {
  const {
    model: {
      projectFolder,
      config: { appId }
    }
  } = useProjectModel();
  const { queryAppVersion } = useDevCenterClient();
  const { previewId } = props;
  const { status } = useAsync(async () => {
    if (previewId == null) {
      await assertBuildOutputExists(projectFolder);
    }
    const { isLocked, isPublished, latestVersion } = await queryAppVersion({
      appId
    });
    if (isLocked) {
      throw new CliError({
        code: CliErrorCode.CannotReleaseLockedApplication(),
        cause: void 0
      });
    }
    const parsedLatestVersion = (0, import_parse.default)(latestVersion);
    if (!parsedLatestVersion) {
      throw new CliError({
        code: CliErrorCode.FailedToParseLatestVersion({
          version: latestVersion
        }),
        cause: void 0,
        info: {
          latestVersion
        }
      });
    }
    return { isPublished, latestVersion: parsedLatestVersion };
  }, []);
  return (0, import_variant3.match)(status, {
    Error: () => null,
    Loading: () => /* @__PURE__ */ import_react4.default.createElement(Spinner, { text: /* @__PURE__ */ import_react4.default.createElement(Text, null, "Loading application details...") }),
    Success: ({ result }) => {
      return previewId == null ? /* @__PURE__ */ import_react4.default.createElement(Release, { ...props, ...result }) : /* @__PURE__ */ import_react4.default.createElement(ReleaseOnlyTag, { previewId });
    }
  });
};
export {
  ReleaseCommand
};
//# sourceMappingURL=ReleaseCommand-TVQ6CTMT.js.map