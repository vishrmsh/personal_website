import { createRequire as _createRequire } from 'node:module';
const require = _createRequire(import.meta.url);
import {
  createI18nT
} from "./chunk-MFLT3M73.js";
import "./chunk-BWQNSFZR.js";
import {
  Option,
  createCommand,
  require_commander
} from "./chunk-J2EPR7DO.js";
import "./chunk-UQLHXG4X.js";
import "./chunk-KJ37XZQA.js";
import "./chunk-RXATQXHV.js";
import {
  require_react
} from "./chunk-NRAQAV6T.js";
import "./chunk-SQ3KPTIH.js";
import "./chunk-WYHHEOWO.js";
import "./chunk-ZXYGJZOO.js";
import "./chunk-IVMK6TVY.js";
import {
  __toESM,
  init_esm_shims
} from "./chunk-4EFJZ3GQ.js";

// ../cli-site-old/src/index.ts
init_esm_shims();

// ../cli-site-old/src/commands/root-command.ts
init_esm_shims();

// ../cli-site-old/src/commands/dev.ts
init_esm_shims();

// ../../node_modules/commander/esm.mjs
init_esm_shims();
var import_index = __toESM(require_commander(), 1);
var {
  program,
  createCommand: createCommand2,
  createArgument,
  createOption,
  CommanderError,
  InvalidArgumentError,
  InvalidOptionArgumentError,
  // deprecated old name
  Command,
  Argument,
  Option: Option2,
  Help
} = import_index.default;

// ../cli-site-old/src/commands/dev.ts
var devCommand = (services, cliVersion) => {
  const t = createI18nT();
  return createCommand("dev").option("-s, --https", t("site_dev_command_def.option.https")).addOption(
    new Option2("--tunnel", t("site_dev_command_def.option.tunnel")).conflicts("https").hideHelp(true)
  ).description(t("site_dev_command_def.description")).action(async (options, command) => {
    const { runCommand } = await import("./run-command-AI22R2SL.js");
    const { dev } = await import("./dev-FUCEQ4O4.js");
    await runCommand(
      command,
      services,
      cliVersion,
      (model) => dev(model, services, options)
    );
  });
};

// ../cli-site-old/src/commands/install.ts
init_esm_shims();
var installCommand = (services, cliVersion) => {
  const t = createI18nT();
  return createCommand("install").description(t("site_install_command_def.description")).argument("[package]", t("site_install_command_def.argument.package")).option("--yarn", t("site_install_command_def.option.yarn")).option("--npm", t("site_install_command_def.option.npm")).action(async (packageName, opts, command) => {
    const { runCommand } = await import("./run-command-AI22R2SL.js");
    const { install } = await import("./install-VJC2YXUK.js");
    await runCommand(
      command,
      services,
      cliVersion,
      (model) => install(model, services, opts, packageName)
    );
  });
};

// ../cli-site-old/src/commands/preview.tsx
init_esm_shims();
var import_react = __toESM(require_react(), 1);
var previewCommand = (services, cliVersion) => {
  const t = createI18nT();
  return createCommand("preview").description(t("site_preview_command_def.description")).addOption(
    new Option(
      "--source <local|remote>",
      t("site_preview_command_def.option.source")
    ).choices(["local", "remote"])
  ).action(async (options, command) => {
    const { renderCommand } = await import("./render-command-CR3MCUPN.js");
    const { PreviewCommand } = await import("./PreviewCommand-XHDA2QXP.js");
    await renderCommand(
      command,
      services,
      cliVersion,
      /* @__PURE__ */ import_react.default.createElement(PreviewCommand, { ...options })
    );
  });
};

// ../cli-site-old/src/commands/publish.ts
init_esm_shims();
var publishCommand = (services, cliVersion) => {
  const t = createI18nT();
  return createCommand("publish").description(t("site_publish_command_def.description")).addOption(
    new Option(
      "--source <local|remote>",
      t("site_publish_command_def.option.source")
    ).choices(["local", "remote"])
  ).option(
    "-y, --approve-preview",
    t("site_publish_command_def.option.approve_preview")
  ).option("-f, --force", t("site_publish_command_def.option.force")).action(async (options, command) => {
    const { runCommand } = await import("./run-command-AI22R2SL.js");
    const { publish } = await import("./publish-FX372M2L.js");
    await runCommand(
      command,
      services,
      cliVersion,
      (model) => publish(model, services, options)
    );
  });
};

// ../cli-site-old/src/commands/sync-types.ts
init_esm_shims();
var syncTypesCommand = (services, cliVersion) => createCommand("sync-types").action(async (_, command) => {
  const { runCommand } = await import("./run-command-AI22R2SL.js");
  const { syncTypes } = await import("./sync-types-XSXLBERP.js");
  await runCommand(
    command,
    services,
    cliVersion,
    (model) => syncTypes(model, services)
  );
});

// ../cli-site-old/src/commands/uninstall.ts
init_esm_shims();
var uninstallCommand = (services, cliVersion) => {
  const t = createI18nT();
  return createCommand("uninstall").description(t("site_uninstall_command_def.description")).argument("<package>", t("site_uninstall_command_def.argument.package")).option("--yarn", t("site_uninstall_command_def.option.yarn")).option("--npm", t("site_uninstall_command_def.option.npm")).action(async (packageName, opts, command) => {
    const { runCommand } = await import("./run-command-AI22R2SL.js");
    const { uninstall } = await import("./uninstall-JUULENKJ.js");
    await runCommand(
      command,
      services,
      cliVersion,
      (model) => uninstall(model, services, opts, packageName)
    );
  });
};

// ../cli-site-old/src/commands/root-command.ts
var getRootCommand = async function getRootCommand2(services, cliVersion) {
  return createCommand("site").addCommand(devCommand(services, cliVersion)).addCommand(installCommand(services, cliVersion)).addCommand(previewCommand(services, cliVersion)).addCommand(publishCommand(services, cliVersion)).addCommand(syncTypesCommand(services, cliVersion), { hidden: true }).addCommand(uninstallCommand(services, cliVersion));
};
export {
  getRootCommand
};
//# sourceMappingURL=src-HVSSKZSZ.js.map